public table prod num cols 2 max rows 10 row expr [0] * alfa*[1];

public table myMTable(
    2,                      // numCols
    10,                     // maxRows
    prod,                   // aggregation type
    zeta - (myTable[0] +  alfa * myTable[1])   // rowExpr
);

public table myMTable(
    2,                      // numCols
    10,                     // maxRows
    prod(
        zeta - (myTable[0] +  alfa * myTable[1])   // rowExpr
    )
);

var acc = 1;
for (let i=0; i<nRow; i++)

constant PUBLIC_TABLE_PROD = 1;




 (1 -x) * $0 + x * $1 + $3;
prod(acc);

expr accApplied = acc(x,y,z);


acc === proverValue;

@public_table { expr:  acc, value: proverValue }

(1 - x) * x === 0

expr mytemplate = zeta - ($0 +  alfa * $1);

expr definitiva = mytemplate.apply(, KK);
zeta - (table[1][2] +  alfa * KK);

public table IDENTIFIER
public table myTable[2] = prod(10, zeta - (myTable[0] +  alfa * myTable[1]);

public table myTable[2];

prod(10, zeta - (myTable[0] +  alfa * myTable[1]);


public myTable = prod_table(2, 10, zeta - ($0 +  alfa * $1));

public_table_prod(10, )


public table(2,10) prod() myTable;

public pepe[2] table(10, PROD, zeta - (myTable[0] +  alfa * myTable[1]);

public pepe[2];
table(pepe, 10, PROD, zeta - (myTable[0] +  alfa * myTable[1]);

* +




define_public_table("myTable", 10, PUBLIC_TABLE_PROD , zeta - (myTable[0] +  alfa * myTable[1]);


public myTable[2] table(10, "prod", zeta - (myTable[0] +  alfa * myTable[1]);

myMTable[2][10] => row 10,

