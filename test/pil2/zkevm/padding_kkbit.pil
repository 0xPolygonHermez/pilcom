/*
    Padding Keccak rBit
    This state machine packs the rBits in bytes (r8)
    And stOut bits in 8 field Elements of 32bit slints.
    It also forces the connection bettwien keccak-f blocks.

          rBit                 sOutBit     sInBit
            ●                     ●          ●
            ●                     ●          ●
            ●                     ●          ●
            ●                     ●          ●
            ●                     ●          ●
            ●                     ●          ●
            ●                     ●          ●
            ●                     ●          ●
                   ●
            ●                     ●          ●
            ●                     ●          ●
            ●                     ●          ●              ┌─────────────────┐
            ●                     ●          ●              │ r8 calculations │
            ●                     ●          ●              │  9*136 = 1224   │
            ●                     ●          ●              │                 │
            ●                     ●          ●              └─────────────────┘
            ●                     ●          ●
                   ● r8[i*136+k]
            .                     .          .
            .                     .          .
            .                     .          .
            ●                     ●          ●
            ●                     ●          ●
            ●                     ●          ●
            ●                     ●          ●
            ●                     ●          ●
            ●                     ●          ●
            ●                     ●          ●
            ●                     ●          ●
                   ●
         ───────────────────────────────────────────────
                                  ●          ●
                                  ●          ●
                                  ●          ●              ┌─────────────────┐
                                  ●          ●              │    capacity     │
                                  ●          ●              │   connection    │
                                  .          .              │       512       │
                                  .          .              └─────────────────┘
                                  .          .
                                  ●          ●
                                  ●          ●
         ──────────────────────────────────────────────
                                  ●
                                  ●                         ┌─────────────────┐
                                  ●                         │   packet sOut   │
                                  .                         │   Calculation   │
                                  .                         │      256+1      │
                                  .                         └─────────────────┘
                                  ●
                                  ●
                                       ●●●●●●●●      sOut{0..7}[i]
*/

/*

    The output for r8 is:

    [r8, r8Id]

    The output for sOut

    [sOut0, sOut1, sOut2, sOut3, sOut4, sOut5, sOut6, sOut7, connect, sOutId]

*/

include "bits2field.pil";

namespace PaddingKK::PaddingKKBit {

    // Input connection
    //   rBit    -> 1 1 0 1  0  1  1   1   X
    //   Fr8     -> 1 2 4 8 16 32 64 128   0
    //   r8      -> 0 1 3 3 11 11 43 107 235
    //   latchR8 -> 0 0 0 0  0  0  0   0   1  0 0 0 0 0

    col fixed R8_ID;
    col fixed S_OUT_ID;
    col fixed LATCH_R8;
    col fixed FR8;          // Factor to add to r8
    col fixed R_BIT_VALID;  // 1 when rIn can be 0 or 1
    col fixed LATCH_S_OUT;
    col fixed FS_OUT[8];
    col fixed CONN_SOUT_BIT, CONN_SIN_BIT, CONN_BIT2FIELD_BIT;

    col witness rBit, sOutBit;
    col witness r8;
    col witness connected;
    col witness sOut[8];

    r8' === r8 * (1-latchR8) + rBit*Fr8;

    for (integer i = 0; i < 8; ++i) {
        sOut[i]' === sOut[i]*(1-latchSOut) + sOutBit*FSOut[i];
    }

    connected'*(1-latchSOut) === connected*(1-latchSOut);
    connected *(1-connected) === 0;
    rBit *( 1- rBit) === 0;
    (1-rBitValid)*rBit === 0;        // Force rBit to 0 on non used pins.
    sOutBit *( 1- sOutBit) === 0;

    // connected, sOutBit, rBit   => sInBit
    //     0         0       0          0
    //     0         0       1          1
    //     0         1       0          0
    //     0         1       1          1
    //     1         0       0          0
    //     1         0       1          1
    //     1         1       0          1
    //     1         1       1          0

    col aux_sInBit = (sOutBit - 2*sOutBit*rBit);
    col sInBit = connected * aux_sInBit + rBit;

    // {sOutBit, sInBit, Bits2Field.bit} connect {CONN_SOUT_BIT, CONN_SIN_BIT, CONN_BIT2FIELD_BIT};
}