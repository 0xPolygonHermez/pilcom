subproof Assigns(2**23) {

    constant N_MAX = 16;
    constant PSIX[6] = [2, 3, 5, 7, 11, 13];

    col witness x1[N_MAX];
    col witness q[3][N_MAX];

    int bc = 4;
    int valA[5];
    int valB[5];
    println(bc);

    function suma(int a, int b): int {
        return a+b;
        assert_eq(0, 1); // never execute this code, perhaps a warning could be nice
    }

    function mycalc(int a, int b): int {
        return 19 * a + 73 * b;
    }

    assert_eq(length(PSIX), 6);
    assert_eq(length(x1), N_MAX);
    assert_eq(length(q), 3);
    assert_eq(length(q[0]), N_MAX);
    assert_eq(length("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"), 36);

    int aux = 200;                              assert_eq(aux, 200);
    aux = aux + 200;                            assert_eq(aux, 400);
    aux = aux + 10;                             assert_eq(aux, 410);
    println(aux);

    aux = aux + PSIX[5];                        assert_eq(aux, 423);
    println(aux);

    assert_eq(mycalc(aux, aux), 38916);

    assert_eq(PSIX[0], 2);
    assert_eq(PSIX[1], 3);
    assert_eq(PSIX[2], 5);
    assert_eq(PSIX[3], 7);
    assert_eq(PSIX[4], 11);
    assert_eq(PSIX[5], 13);

    int index = 0;
    int res = PSIX[index++] + PSIX[index++] * PSIX[index++];
    // PSIX[0] + PSIX[1] * PSIX[2] = 2 + 3 * 5 = 17 OK (left-to-right)
    // PSIX[3] + PSIX[0] * PSIX[1] = 5 + 2 * 3 = 11 FAIL

    assert_eq(res, 17);                          assert_eq(index, 3);

    index = 0;
    res = PSIX[++index] + PSIX[++index] * PSIX[++index];
    // PSIX[1] + PSIX[2] * PSIX[3] = 3 + 5 * 7 = 38
    // PSIX[3] + PSIX[1] * PSIX[2] = 7 + 3 * 5 = 22

    assert_eq(res, 38);                          assert_eq(index, 3);


    aux = 100; // 101 * 19 + 102 * 73 = 9365
    assert_eq(mycalc(++aux, ++aux), 9365 );      assert_eq(aux, 102);

    aux = 100; // 100 * 19 + 101 * 73 = 9273
    assert_eq(mycalc(aux++, aux++), 9273 );      assert_eq(aux, 102);

    aux = 100; // 101 + 102 * 103 = 10607 OK (left-to-right)
               // 103 + 101 * 102 = 10405 FAIL !!!
    res = ++aux + ++aux * ++aux;
    assert_eq(res, 10607);                       assert_eq(aux, 103);

    aux = 100; // 100 + 101 * 102 = 10402 OK (left-to-right)
               // 102 + 100 * 101 = 10202 FAIL !!!

    res = aux++ + aux++ * aux++;
    assert_eq(res, 10402);                       assert_eq(aux, 103);

    aux = PSIX[0];                              assert_eq(aux, 2);
    aux = PSIX[1];                              assert_eq(aux, 3);
    aux = PSIX[2];                              assert_eq(aux, 5);
    aux = PSIX[3];                              assert_eq(aux, 7);
    aux = PSIX[4];                              assert_eq(aux, 11);
    aux = PSIX[5];                              assert_eq(aux, 13);

    int i = 12;                                 assert_eq(i, 12);

    assert_eq(PSIX[bc-1], 7);
    assert_eq(i+25*bc+PSIX[bc+1], 125);
    int values[6];
    assert_eq(length(PSIX), 6);

    for (i = 0; i < length(PSIX); ++i) {
        values[i] = PSIX[i] * 10;
    }

    assert_eq(values[0], 20);
    assert_eq(values[1], 30);
    assert_eq(values[2], 50);
    assert_eq(values[3], 70);
    assert_eq(values[4], 110);
    assert_eq(values[5], 130);

    assert_eq(suma(10, 12), 22);
    assert_eq(suma(i, aux), 19);

    for (int i = 0; i < length(valA); ++i) {
        valA[i] = (i+1)*10+i;
        println(valA[i]);
        assert(valA[i] == (i+1)*10+i);
        assert_eq(valA[i], (i+1)*10+i);
    }
    for (int i = 0; i < length(valB); ++i) {
        println(valB[i]);
        assert(valB[i] == 0);
        assert_eq(valB[i], 0);
    }

    // array assignation (copy)
    valB = valA;
    for (int i = 0; i < length(valB); ++i) {
        println(valB[i]);
        assert(valB[i] == (i+1)*10+i);
        assert_eq(valB[i], (i+1)*10+i);
    }


    int matA[3][5];
    for (int i = 0; i < length(matA); ++i) {
        for (int j = 0; j < length(matA[i]); ++j) {
            matA[i][j] = 1000000 + i*1000+j;
            println(`matA[${i}][${j}] = ${matA[i][j]}`);
            assert(matA[i][j] == 1000000 + i*1000+j);
            assert_eq(matA[i][j], 1000000 + i*1000+j);
        }
    }
    int matB[3][5];
    // matrix assignation (copy)
    matB = matA;
    for (int i = 0; i < length(matA); ++i) {
        for (int j = 0; j < length(matA[i]); ++j) {
            // matA[i][j] = 1000000 + i*1000+j;
            println(`matB[${i}][${j}] = ${matB[i][j]}`);
            assert(matB[i][j] == 1000000 + i*1000+j);
            assert_eq(matB[i][j], 1000000 + i*1000+j);
        }
    }

    println("Done!!");
}