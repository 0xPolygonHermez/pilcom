subair BuiltIn(2**23);

function func1(col x, int i3) {
    assert(defined(x) == 1);
    assert(defined(x1) == 0);
    assert(defined(PSIX) == 1);
    assert(defined(bc) == 0);
    assert(defined(tmp) == 0);
    assert(defined(MATRIX) == 1);
    assert(defined(MATRIX[0]) == 1);
    assert(defined(MATRIX[2]) == 0);
    assert(defined(w1) == 0);
    assert(defined(w2) == 0);
    assert(defined(w3) == 0);
    assert(defined(k1) == 0);
    assert(defined(k2) == 0);
    assert(defined(k3) == 0);
    assert(defined(f1) == 0);
    assert(defined(f2) == 0);
    assert(defined(f3) == 0);
    assert(defined(gw1) == 1);
    assert(defined(gw2) == 1);
    assert(defined(gw3) == i3);
    assert(defined(gk1) == 1);
    assert(defined(gk2) == 1);
    assert(defined(gk3) == i3);
    assert(defined(gf1) == 1);
    assert(defined(gf2) == 1);
    assert(defined(gf3) == i3);
    func2(x,i3);
}

function func2(col y, int i3) {
    assert(defined(y) == 1);
    assert(defined(x) == 0);
    assert(defined(x1) == 0);
    assert(defined(PSIX) == 1);
    assert(defined(bc) == 0);
    assert(defined(tmp) == 0);
    assert(defined(MATRIX) == 1);
    assert(defined(MATRIX[0]) == 1);
    assert(defined(MATRIX[2]) == 0);
    assert(defined(w1) == 0);
    assert(defined(w2) == 0);
    assert(defined(w3) == 0);
    assert(defined(k1) == 0);
    assert(defined(k2) == 0);
    assert(defined(k3) == 0);
    assert(defined(f1) == 0);
    assert(defined(f2) == 0);
    assert(defined(f3) == 0);
    assert(defined(gw1) == 1);
    assert(defined(gw2) == 1);
    assert(defined(gw3) == i3);
    assert(defined(gk1) == 1);
    assert(defined(gk2) == 1);
    assert(defined(gk3) == i3);
    assert(defined(gf1) == 1);
    assert(defined(gf2) == 1);
    assert(defined(gf3) == i3);
}

function func3(col x[]) {
    assert(defined(x) == 1);
    assert(defined(x[0]) == 1);
    assert(defined(x[31]) == 1);
    assert(defined(x[32]) == 0);
    assert(defined(x[0][0]) == 0);
}

namespace BuiltIn:: {

    constant N_MAX = 32;
    constant PSIX[6] = [2, 3, 5, 7, 11, 13];
    constant MATRIX[2][8] = [[10,11,12,13,14,15,16,17], [20,21,22,23,24,25,26,27]];
    col witness x1[N_MAX];

    col witness w1,w2;
    col fixed f1,f2;
    col k1,k2;

    global col witness gw1,gw2;
    global col fixed gf1,gf2;
    global col gk1,gk2;

    int bc = 4;
    col tmp = 0;
    expr myfirstexpr = bc * x1[0]'2;

    assert(defined(N_MIN) == 0);
    assert(defined(N_MAX) == 1);
    assert(defined(PSIX) == 1);
    assert(defined(PSIX[0]) == 1);
    assert(defined(PSIX[0][0]) == 0);
    assert(defined(PSIX[5]) == 1);
    assert(defined(PSIX[1+5]) == 0);
    assert(defined(PSIX[bc]) == 1);
    assert(defined(MATRIX[1]) == 1);
    assert(defined(MATRIX[2]) == 0);
    assert(defined(MATRIX[1][0]) == 1);
    assert(defined(MATRIX[0][8]) == 0);
    assert(defined(MATRIX[1][8]) == 0);
    assert(defined(bc) == 1);
    assert(defined(tmp) == 1);
    assert(defined(myfirstexpr) == 1);
    assert(defined(_myfirstexpr) == 0);
    assert(defined(x1) == 1);
    assert(defined(x1[0]) == 1);
    assert(defined(x1[N_MAX-1]) == 1);
    assert(defined(x1[N_MAX]) == 0);

    assert(defined(nondefined) == 0);
    assert(defined(tmp + 2) == 0);
    assert(defined(3) == 0);

    assert(defined(w1) == 1);
    assert(defined(w2) == 1);
    assert(defined(w3) == 0);
    assert(defined(k1) == 1);
    assert(defined(k2) == 1);
    assert(defined(k3) == 0);
    assert(defined(f1) == 1);
    assert(defined(f2) == 1);
    assert(defined(f3) == 0);

    func1(x1[0], 0);

    global col witness gw3;
    global col fixed gf3;
    global col gk3;

    func1(x1[0], 1);
    func3(x1);
}