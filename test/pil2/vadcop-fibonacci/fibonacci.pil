challenge stage(2) std_alpha;
challenge stage(2) std_beta;
public in1;
public in2;
public mod;
public out;

include "module.pil";

function final_function() {
    gsum_fibonacci + gsum_module === 0;
}

subproof Fibonacci(2**16) {

    subproofval aggregate(sum) gsum_fibonacci;

    col fixed L1 = [1,0...];
    col witness a,b;

    (b' - a) * (1 - L1') === 0;
    L1 * (b - in1) === 0;
    L1 * (a - in2) === 0;

    // * multiset_require(MODULE_ID, 1, [a*a + b*b, a'])

    // * (1-LLAST) [a*a + b*b, a'] is (1-LLAST) [Arith.x, Arith.x_mod]
    // * cols compressed
    // gsum_require[0] = ((((L1' * out)+ (1-L1') * a') * std_alpha + a * a + b * b) * std_alpha) + MODULE_ID + std_beta;
    // gsum_require_mul_count[0] = 1

    col witness stage(3) gsum;

    // * expr LHS = 1;
    // LHS = 1;
    // RHS1 = 0;
    // * RHS2a = LHS;
    // RHS2a = 1;
    // RHS2b = 0;
    // * LHS = LHS * gsum_require[i];
    // LHS = ((((L1' * out)+ (1-L1') * a') * std_alpha + a * a + b * b) * std_alpha) + MODULE_ID + std_beta
    // * RHS1 = RHS1 * gsum_require[i];
    // RHS1 = 0
    // * RHS2b = RHS2b + gsum_require_mul_count[i];
    // RHS2b = 0 + gsum_require_mul_count[0] = 0 + 1 = 1
    // * RHS2 = RHS2a * RHS2b;
    // RHS2 = 1 * 1 = 1
    // * RHS = RHS1 - RHS2;
    // RHS = 0 - 1 = -1

    // * (gsum - 'gsum * (1 - L1)) * LHS === RHS;
    (gsum - 'gsum * (1 - L1)) * (((((L1' * out)+ (1-L1') * a') * std_alpha + a * a + b * b) * std_alpha) + MODULE_ID + std_beta) + 1 === 0;
    // *L1' * (gsum - subproof.std.piop.gsum_result) === 0;
    L1' * (gsum - gsum_fibonacci) === 0;

    on final proof final_function();
};


