function multiset_requires(int id, expr sel, expr cols[]) {
    multiset(0, id, sel, cols);
}

function multiset_provides(int id, expr sel, expr cols[]) {
    multiset(1, id, sel, cols);
}

// public table aggregate(prod, aggregate_function, MEMORY) pt_memory[3][10];

function aggregate_function ( public table tb, int id ) : expr {
    // verify if correct id and cols
    check_multiset_id_and_cols(id, length(cols), provides);

    init_multiset_challenges(0);

    expr cols_selected = multiset_prepare_cols(id, 1, cols);

    on final proof check_multiset_was_complete();

    return cols_selected;
}

function multiset_prepare_cols ( int id, expr sel, expr cols[] ) :expr {
    expr cols_compressed = 0;
    for (int icol = length(cols) - 1; icol >= 0; --icol) {
        cols_compressed = (cols_compressed + cols[icol]) * std_alpha;
    }

    // first extra col was id of multiset
    cols_compressed = cols_compressed + id;
    if (sel == 1) {
        return cols_compressed + std_beta;
    }
    return sel * (cols_compressed + std_beta - 1) + 1;
}

function multiset(int provides, int id, expr sel, expr cols[]) {
    // verify if correct id and cols
    check_multiset_id_and_cols(id, length(cols), provides);

    init_multiset_challenges(0);

    // TODO: optimize to put only once this constraint if witness col, if cols are fixed
    // check on compilation time, constraint not needed.

    // TODO: optimization of constraints, at end review if expressions was fixed check on
    // compilation time the constraint
    if (sel != 1) {
        sel * (1 - sel) === 0;
    }

    expr cols_selected = multiset_prepare_cols(id, sel, cols);

    if (provides) {
        // adding all products of provides called in this subair
        multiset_gprod_provides = multiset_gprod_provides * cols_selected;
    } else {
        // adding all products of requires called in this subair
        multiset_gprod_requires = multiset_gprod_requires * cols_selected;
    }

    on final multiset_air_constraints();
    on final subproof multiset_subproof_constraints();
    on final proof multiset_proof_constraints();
}

private function init_multiset_challenges(int lookup)
{
    if (!defined(std_alpha)) {
        // TODO: could be challenge non global
        global challenge stage(2) std_alpha;
        global challenge stage(2) std_beta;
    }
}

// function to verify that number of columns of same multiset (requires, provides)
// was the same.

private function check_multiset_id_and_cols(int id, int _cols, int provides) {

    scope `std.multiset.${id}` {
        once persistent proof {
            int multiset_cols;
            int multiset_provides;
            int multiset_requires;
        }

        if (_cols < 1) {
            error("number of cols of multiset #$0 must be greater than 0", id);
        }
        // non defined

        if (multiset_cols == 0) {
            // TODO: G2 - structs
            multiset_cols[id] = _cols;
            // multiset_source[id] == __SOURCE__
        } else if (multiset_cols[id] != _cols) {
            error("number of cols of multiset #$0 must be $1", id, multiset_cols[id]);
        }

        if (provides) {
            ++multiset_provides[id];
        } else {
            ++multiset_requires[id];
        }

        once proof {
            global expr multiset_air_gprod = 1;
        }
        once subproof {
            subproof value aggregate(prod) multiset_subair_gprod;
        }
        once {
            global expr multiset_gprod_requires = 1;
            global expr multiset_gprod_provides = 1;
        }
    }
}

private function multiset_air_constraints() {

    // TODO: allow use defined constants as stage id.
    col witness stage(3) gprod;

    //                     (requires_selected + std_gamma)
    //  gprod === 'gprod * ----------------------------
    //                     (provides_selected + std_gamma)


    col fixed L1 = [1,0...]; // compiler optimize and only exists one L1

    col previous_gprod = 'gprod * (1 - L1) + L1;  // L1 == 1 ? 1 : 'gprod

    grod * multiset_gprod_provides === previous_gprod * multiset_gprod_requires;

    L1' * (gprod - multiset_subproof_gprod) === 0;
}

private function multiset_subproof_constraints() {
    multiset_proof_gprod = multiset_proof_gprod * multiset_subproof_gprod;
}

private function multiset_proof_constraints() {
    check_multiset_was_complete();

    multiset_proof_gprod === 1;
}

private function check_multiset_was_complete() {
    for (int index = 0; index < MAX_MULTISET_ID; ++index) {
        if (multiset_cols[index] == 0) continue;
        if (multiset_requires[index] == 0) {
            error("multiset #$0 defined without requires", id);
        }
        if (multiset_provides[index] == 0) {
            error("multiset #$0 defined without provides", id);
        }
    }
}