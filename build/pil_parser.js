/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var pil_parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,17],$V1=[1,19],$V2=[1,28],$V3=[1,51],$V4=[1,29],$V5=[1,30],$V6=[1,31],$V7=[1,32],$V8=[1,33],$V9=[1,34],$Va=[1,47],$Vb=[1,36],$Vc=[1,37],$Vd=[1,38],$Ve=[1,39],$Vf=[1,40],$Vg=[1,52],$Vh=[1,24],$Vi=[1,20],$Vj=[1,25],$Vk=[1,26],$Vl=[1,21],$Vm=[1,22],$Vn=[1,50],$Vo=[1,44],$Vp=[1,45],$Vq=[1,49],$Vr=[5,6,26,40,45],$Vs=[62,63],$Vt=[2,58],$Vu=[1,66],$Vv=[1,65],$Vw=[1,78],$Vx=[5,6,24,26,33,40,45,46,60,62,63,65,73,78,79,80,81,82,83,84,85,87,89],$Vy=[1,83],$Vz=[5,6,24,26,33,40,45,46,60,62,63,65,73,78,79,80,81,82,83,84,85,87,89,90],$VA=[1,84],$VB=[5,6,24,26,33,40,45,46,60,62,63,65,73,78,79,80,81,82,83,84,85,87,89,90,92],$VC=[1,88],$VD=[5,6,24,26,29,33,40,45,46,60,62,63,65,73,78,79,80,81,82,83,84,85,87,89,90,92,96],$VE=[1,97],$VF=[1,100],$VG=[26,33,65],$VH=[1,103],$VI=[1,119],$VJ=[1,118],$VK=[6,26],$VL=[2,5],$VM=[1,130],$VN=[2,57],$VO=[1,139],$VP=[5,6,26,40,45,65],$VQ=[1,150],$VR=[1,151],$VS=[1,152],$VT=[1,153],$VU=[1,154],$VV=[1,155],$VW=[1,156],$VX=[1,157],$VY=[1,162],$VZ=[6,33,84,85],$V_=[1,203],$V$=[1,202],$V01=[26,40,45],$V11=[1,163],$V21=[5,6,26,40,43,45];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"allStatments":3,"statmentList":4,"EOF":5,"CS":6,"blockStatmentList":7,"statment":8,"plookupIdentity":9,"permutationIdentity":10,"connectIdentity":11,"polCommitDeclaration":12,"polConstantDeclaration":13,"namespaceDef":14,"subproofDef":15,"polDef":16,"polIdentity":17,"include":18,"publicDeclaration":19,"constantDef":20,"codeBlock":21,"when":22,"expression":23,"{":24,"whenBody":25,"}":26,"codeVarDeclaration":27,"for":28,"(":29,"codeForInit":30,"condExpression":31,"expressionList":32,")":33,"while":34,"do":35,"switch":36,"codeCaseList":37,"if":38,"codeElseIf":39,"else":40,"continue":41,"break":42,"elseif":43,"codeCaseItem":44,"case":45,":":46,"codeVarAssigment":47,"var":48,"codeVarInit":49,"expr":50,"refpol":51,"refexpr":52,"refvar":53,"IDENTIFIER":54,"=":55,"codeVarAssignment":56,"INCLUDE":57,"STRING":58,"pol":59,"===":60,"puSide":61,"in":62,"is":63,"connect":64,",":65,"commit":66,"polNamesList":67,"public":68,"polId":69,"constant":70,"polName":71,"[":72,"]":73,"namespace":74,"subproof":75,"CONSTANTID":76,"e5":77,"EQ":78,"NE":79,"LT":80,"GT":81,"LE":82,"GE":83,"AND":84,"OR":85,"!":86,"+":87,"e4":88,"-":89,"*":90,"e3":91,"**":92,"e2":93,"e1":94,"NUMBER":95,"'":96,".":97,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",6:"CS",22:"when",24:"{",26:"}",28:"for",29:"(",33:")",34:"while",35:"do",36:"switch",38:"if",40:"else",41:"continue",42:"break",43:"elseif",45:"case",46:":",47:"codeVarAssigment",48:"var",50:"expr",51:"refpol",52:"refexpr",53:"refvar",54:"IDENTIFIER",55:"=",57:"INCLUDE",58:"STRING",59:"pol",60:"===",62:"in",63:"is",64:"connect",65:",",66:"commit",68:"public",70:"constant",72:"[",73:"]",74:"namespace",75:"subproof",76:"CONSTANTID",78:"EQ",79:"NE",80:"LT",81:"GT",82:"LE",83:"GE",84:"AND",85:"OR",86:"!",87:"+",89:"-",90:"*",92:"**",95:"NUMBER",96:"'",97:"."},
productions_: [0,[3,2],[3,3],[7,2],[7,1],[7,0],[4,3],[4,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,5],[25,3],[25,2],[25,1],[21,1],[21,11],[21,7],[21,8],[21,7],[21,8],[21,12],[21,1],[21,1],[39,8],[39,0],[37,2],[37,1],[44,4],[44,2],[30,1],[30,1],[27,2],[27,2],[27,2],[27,2],[27,2],[49,1],[49,3],[56,3],[18,2],[16,4],[17,3],[9,3],[10,3],[11,7],[61,4],[61,3],[61,1],[32,3],[32,1],[12,3],[19,7],[13,3],[67,3],[67,1],[71,1],[71,4],[14,4],[14,5],[15,5],[20,4],[23,1],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,2],[31,3],[77,3],[77,3],[77,1],[88,3],[88,1],[91,3],[91,1],[93,2],[93,2],[93,1],[93,2],[93,1],[94,1],[94,1],[94,3],[69,2],[69,3],[69,6],[69,3],[69,4],[69,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

            // console.log(JSON.stringify($$[$0-1], null, 1));
            this.$ = $$[$0-1];
            return this.$
        
break;
case 2:

            // console.log(JSON.stringify($$[$0-2], null, 1));
            this.$ = $$[$0-2];
            return this.$
        
break;
case 3: case 23: case 82:

            this.$ = $$[$0-1];
        
break;
case 4: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 72: case 85: case 87: case 89: case 92:

            this.$ = $$[$0];
        
break;
case 6: case 59:

            $$[$0-2].push($$[$0]);
        
break;
case 7: case 24: case 60: case 65:

            this.$ = [$$[$0]];
        
break;
case 17: case 18: case 19:

            this.$ = $$[$0]
        
break;
case 20:

            this.$ = { type: "Code", statments: $$[$0] };
        
break;
case 21:

            this.$ = { type: "When", statments: $$[$0-4] };
        
break;
case 22:

            this.$ = $$[$0-2];
            this.$.push($$[$0]);
        
break;
case 25: case 32: case 33:

           setLines(this.$, _$[$0], _$[$0]);
        
break;
case 26:

           setLines(this.$, _$[$0-10], _$[$0]);
        
break;
case 27: case 29:


           setLines(this.$, _$[$0-6], _$[$0]);
        
break;
case 28:


           setLines(this.$, _$[$0-7], _$[$0]);
        
break;
case 30:

            console.log('#### IF1 ####');
            this.$ = {conditions: [{type: 'if', expression: $$[$0-5], statment: $$[$0-2] }].concat($$[$0].conditions) };
            setLines(this.$, _$[$0-7], _$[$0]);
        
break;
case 31:

           console.log('#### IF2 ####');
           this.$ = { conditions: [{type: 'if', expression: $$[$0-9], statment: $$[$0-6] }].concat($$[$0-4].conditions) };
           this.$.conditions.push({type: 'else', statment: $$[$0-1] });
           setLines(this.$, _$[$0-11], _$[$0-3]);
        
break;
case 34:

            console.log('#### IF3 ####');
            console.log($$[$0-7]);
            $$[$0-7].conditions.push({type:'elseif', expression: $$[$0-4], statments: $$[$0-1]});
            this.$ = $$[$0-7];
            setLines(this.$, _$[$0-7], _$[$0]);
        
break;
case 35:

            console.log('#### IF4 ####');
            this.$ = { conditions: [] };
            setLines(this.$, this._$, this._$);
       
break;
case 50:

            this.$ = {type: "Include", file: $$[$0]}
        
break;
case 51:

            this.$ = {type: "PolDefinition", name: $$[$0-2], expression: $$[$0]};
            setLines(this.$, _$[$0-3], _$[$0-1]);
        
break;
case 52:

            this.$ = {type: "PolIdentity", expression: { op: "sub", values: [$$[$0-2],$$[$0]] }};
            setLines(this.$, _$[$0-2], _$[$0]);
        
break;
case 53:

            this.$ = {type: "PlookupIdentity", f: $$[$0-2].pols, t: $$[$0].pols, selF: $$[$0-2].sel, selT: $$[$0].sel};
            setLines(this.$, _$[$0-2], _$[$0]);
        
break;
case 54:

            this.$ = {type: "PermutationIdentity", f: $$[$0-2].pols, t: $$[$0].pols, selF: $$[$0-2].sel, selT: $$[$0].sel};
            setLines(this.$, _$[$0-2], _$[$0]);
        
break;
case 55:

            this.$ = {type: "ConnectionIdentity", pols: $$[$0-5], connections: $$[$0-1]}
            setLines(this.$, _$[$0-6], _$[$0]);
        
break;
case 56:

            this.$ = {pols:$$[$0-1], sel:  $$[$0-3]};
        
break;
case 57:

            this.$ = {pols:$$[$0-1], sel:  null};
        
break;
case 58:

            this.$ = {pols:[$$[$0]], sel:  null};
        
break;
case 61:

            this.$ = {type: "PolCommitDeclaration", names: $$[$0]}
            setLines(this.$, _$[$0-2], _$[$0]);
        
break;
case 62:

            this.$ = {type: "PublicDeclaration", name: $$[$0-5], pol: $$[$0-3], idx: $$[$0-1]}
            setLines(this.$, _$[$0-6], _$[$0-3]);
        
break;
case 63:

            this.$ = {type: "PolConstantDeclaration", names: $$[$0]}
            setLines(this.$, _$[$0-2], _$[$0]);
        
break;
case 64:

            $$[$0-2].push($$[$0]);
            this.$ = $$[$0-2];
        
break;
case 66:

            this.$ = {
                name: $$[$0],
                type: "single"
            }
        
break;
case 67:

            this.$ = {
                name: $$[$0-3],
                type: "array",
                expLen: $$[$0-1]
            }
        
break;
case 68:

            this.$ = {type: "Namespace", name: $$[$0-2], subproof: $$[$0]}
            setLines(this.$, _$[$0-3], _$[$0]);
        
break;
case 69:

            this.$ = {type: "Namespace", name: $$[$0-3], subproof: false, exp: $$[$0-1]}
            setLines(this.$, _$[$0-4], _$[$0]);
        
break;
case 70:

            this.$ = {type: "Subproof", name: $$[$0-3], exp: $$[$0-1]}
            setLines(this.$, _$[$0-4], _$[$0]);
        
break;
case 71:

            this.$ = {type: "ConstantDefinition", name: $$[$0-2], exp: $$[$0]}
            setLines(this.$, _$[$0-3], _$[$0]);
        
break;
case 73:

            this.$ = { op: "eq", values: [$$[$0-2], $$[$0]] };
            setLines(this.$, _$[$0-2], _$[$0]);
        
break;
case 74:

            this.$ = { op: "ne", values: [$$[$0-2], $$[$0]] };
            setLines(this.$, _$[$0-2], _$[$0]);
        
break;
case 75:

            this.$ = { op: "lt", values: [$$[$0-2], $$[$0]] };
            setLines(this.$, _$[$0-2], _$[$0]);
        
break;
case 76:

            this.$ = { op: "gt", values: [$$[$0-2], $$[$0]] };
            setLines(this.$, _$[$0-2], _$[$0]);
        
break;
case 77:

            this.$ = { op: "le", values: [$$[$0-2], $$[$0]] };
            setLines(this.$, _$[$0-2], _$[$0]);
        
break;
case 78:

            this.$ = { op: "ge", values: [$$[$0-2], $$[$0]] };
            setLines(this.$, _$[$0-2], _$[$0]);
        
break;
case 79:

            this.$ = { op: "and", values: [$$[$0-2], $$[$0]] };
            setLines(this.$, _$[$0-2], _$[$0]);
        
break;
case 80:

            this.$ = { op: "or", values: [$$[$0-2], $$[$0]] };
            setLines(this.$, _$[$0-2], _$[$0]);
        
break;
case 81:

            this.$ = { op: "not", values: [$$[$0]] };
            setLines(this.$, _$[$0-1], _$[$0]);
        
break;
case 83:

            // this.$ = yy.parser.calculate.add($$[$0-2],$$[$0]);
            this.$ = { op: "add", values: [$$[$0-2], $$[$0]] };
            setLines(this.$, _$[$0-2], _$[$0]);
        
break;
case 84:

            this.$ = { op: "sub", values: [$$[$0-2], $$[$0]] };
            setLines(this.$, _$[$0-2], _$[$0]);
        
break;
case 86:

            this.$ = { op: "mul", values: [$$[$0-2], $$[$0]] };
            setLines(this.$, _$[$0-2], _$[$0]);
        
break;
case 88:

            this.$ = { op: "pow", values: [$$[$0-2], $$[$0]] };
            setLines(this.$, _$[$0-2], _$[$0]);
        
break;
case 90:

            this.$ = $$[$0];
            setLines(this.$, _$[$0-1], _$[$0]);
        
break;
case 91:

            this.$ = { op: "neg", values: [$$[$0]] };
            setLines(this.$, _$[$0-1], _$[$0]);
        
break;
case 93:

            this.$ = {op: "public", name: $$[$0] }
            setLines(this.$, _$[$0-1], _$[$0]);
        
break;
case 94:

            this.$ = $$[$0]
            setLines(this.$, _$[$0]);
        
break;
case 95:

            this.$ = {op: "number", value: $$[$0] }
            setLines(this.$, _$[$0]);
        
break;
case 96:

            this.$ = {op: "constant", name: $$[$0] }
            setLines(this.$, _$[$0]);
        
break;
case 97:

            this.$ = $$[$0-1];
            setLines(this.$, _$[$0-2], _$[$0]);
        
break;
case 98:

            $$[$0-1].next= true;
            this.$ = $$[$0-1];
        
break;
case 99:

            $$[$0-2].next= $$[$0];
            this.$ = $$[$0-2];
        
break;
case 100:

            this.$ = {op: "pol", next: false, namespace: $$[$0-5], name: $$[$0-3], idxExp: $$[$0-1]}
            setLines(this.$, _$[$0-5], _$[$0]);
        
break;
case 101:

            this.$ = {op: "pol", next: false, namespace: $$[$0-2], name: $$[$0]}
            setLines(this.$, _$[$0-2], _$[$0]);
        
break;
case 102:

            this.$ = {op: "pol", next: false, namespace: "this", name: $$[$0-3], idxExp: $$[$0-1]}
            setLines(this.$, _$[$0-3], _$[$0]);
        
break;
case 103:

            this.$ = {op: "pol", next: false, namespace: "this", name: $$[$0]}
            setLines(this.$, _$[$0], _$[$0]);
        
break;
}
},
table: [{3:1,4:2,8:3,9:4,10:5,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:$V0,23:23,24:$V1,27:27,28:$V2,29:$V3,34:$V4,35:$V5,36:$V6,38:$V7,41:$V8,42:$V9,46:$Va,48:$Vb,50:$Vc,51:$Vd,52:$Ve,53:$Vf,54:$Vg,57:$Vh,59:$Vi,61:18,68:$Vj,69:48,70:$Vk,74:$Vl,75:$Vm,76:$Vn,77:35,87:$Vo,88:41,89:$Vp,91:42,93:43,94:46,95:$Vq},{1:[3]},{5:[1,53],6:[1,54]},o($Vr,[2,7]),o($Vr,[2,8]),o($Vr,[2,9]),o($Vr,[2,10]),o($Vr,[2,11]),o($Vr,[2,12]),o($Vr,[2,13]),o($Vr,[2,14]),o($Vr,[2,15]),o($Vr,[2,16]),o($Vr,[2,17]),o($Vr,[2,18]),o($Vr,[2,19]),o($Vr,[2,20]),{23:55,29:$V3,46:$Va,54:$Vg,69:48,76:$Vn,77:35,87:$Vo,88:41,89:$Vp,91:42,93:43,94:46,95:$Vq},{62:[1,56],63:[1,57]},{23:59,29:$V3,32:58,46:$Va,54:$Vg,69:48,76:$Vn,77:35,87:$Vo,88:41,89:$Vp,91:42,93:43,94:46,95:$Vq},{54:[1,62],66:[1,60],70:[1,61]},{54:[1,63]},{54:[1,64]},o($Vs,$Vt,{24:$Vu,60:$Vv}),{58:[1,67]},{54:[1,68]},{76:[1,69]},o($Vr,[2,25]),{29:[1,70]},{29:[1,71]},{24:[1,72]},{29:[1,73]},{29:[1,74]},o($Vr,[2,32]),o($Vr,[2,33]),o([5,6,24,26,33,40,45,46,60,62,63,65,73,78,79,80,81,82,83,84,85],[2,72],{87:[1,75],89:[1,76]}),{49:77,54:$Vw},{49:79,54:$Vw},{49:80,54:$Vw},{49:81,54:$Vw},{49:82,54:$Vw},o($Vx,[2,85],{90:$Vy}),o($Vz,[2,87],{92:$VA}),o($VB,[2,89]),{29:$V3,46:$Va,54:$Vg,69:48,76:$Vn,87:$Vo,89:$Vp,93:85,94:46,95:$Vq},{29:$V3,46:$Va,54:$Vg,69:48,76:$Vn,87:$Vo,89:$Vp,93:86,94:46,95:$Vq},o($VB,[2,92]),{54:[1,87]},o($VB,[2,94],{96:$VC}),o($VD,[2,95]),o($VD,[2,96]),{23:89,29:$V3,46:$Va,54:$Vg,69:48,76:$Vn,77:35,87:$Vo,88:41,89:$Vp,91:42,93:43,94:46,95:$Vq},o($VD,[2,103],{72:[1,91],97:[1,90]}),{1:[2,1]},{5:[1,92],8:93,9:4,10:5,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:$V0,23:23,24:$V1,27:27,28:$V2,29:$V3,34:$V4,35:$V5,36:$V6,38:$V7,41:$V8,42:$V9,46:$Va,48:$Vb,50:$Vc,51:$Vd,52:$Ve,53:$Vf,54:$Vg,57:$Vh,59:$Vi,61:18,68:$Vj,69:48,70:$Vk,74:$Vl,75:$Vm,76:$Vn,77:35,87:$Vo,88:41,89:$Vp,91:42,93:43,94:46,95:$Vq},{24:[1,94]},{23:96,24:$VE,29:$V3,46:$Va,54:$Vg,61:95,69:48,76:$Vn,77:35,87:$Vo,88:41,89:$Vp,91:42,93:43,94:46,95:$Vq},{23:96,24:$VE,29:$V3,46:$Va,54:$Vg,61:98,69:48,76:$Vn,77:35,87:$Vo,88:41,89:$Vp,91:42,93:43,94:46,95:$Vq},{26:[1,99],65:$VF},o($VG,[2,60]),{54:$VH,67:101,71:102},{54:$VH,67:104,71:102},{55:[1,105]},{29:[1,107],75:[1,106]},{29:[1,108]},{23:109,29:$V3,46:$Va,54:$Vg,69:48,76:$Vn,77:35,87:$Vo,88:41,89:$Vp,91:42,93:43,94:46,95:$Vq},{23:59,29:$V3,32:110,46:$Va,54:$Vg,69:48,76:$Vn,77:35,87:$Vo,88:41,89:$Vp,91:42,93:43,94:46,95:$Vq},o($Vr,[2,50]),{55:[1,111]},{55:[1,112]},{27:114,30:113,47:[1,115],48:$Vb,50:$Vc,51:$Vd,52:$Ve,53:$Vf},{23:117,29:$VI,31:116,46:$Va,54:$Vg,69:48,76:$Vn,77:35,86:$VJ,87:$Vo,88:41,89:$Vp,91:42,93:43,94:46,95:$Vq},o($VK,$VL,{8:3,9:4,10:5,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,61:18,23:23,27:27,77:35,88:41,91:42,93:43,94:46,69:48,7:120,4:121,22:$V0,24:$V1,28:$V2,29:$V3,34:$V4,35:$V5,36:$V6,38:$V7,41:$V8,42:$V9,46:$Va,48:$Vb,50:$Vc,51:$Vd,52:$Ve,53:$Vf,54:$Vg,57:$Vh,59:$Vi,68:$Vj,70:$Vk,74:$Vl,75:$Vm,76:$Vn,87:$Vo,89:$Vp,95:$Vq}),{23:122,29:$V3,46:$Va,54:$Vg,69:48,76:$Vn,77:35,87:$Vo,88:41,89:$Vp,91:42,93:43,94:46,95:$Vq},{23:117,29:$VI,31:123,46:$Va,54:$Vg,69:48,76:$Vn,77:35,86:$VJ,87:$Vo,88:41,89:$Vp,91:42,93:43,94:46,95:$Vq},{29:$V3,46:$Va,54:$Vg,69:48,76:$Vn,87:$Vo,88:124,89:$Vp,91:42,93:43,94:46,95:$Vq},{29:$V3,46:$Va,54:$Vg,69:48,76:$Vn,87:$Vo,88:125,89:$Vp,91:42,93:43,94:46,95:$Vq},o($Vr,[2,42]),o($Vr,[2,47],{55:[1,126]}),o($Vr,[2,43]),o($Vr,[2,44]),o($Vr,[2,45]),o($Vr,[2,46]),{29:$V3,46:$Va,54:$Vg,69:48,76:$Vn,87:$Vo,89:$Vp,91:127,93:43,94:46,95:$Vq},{29:$V3,46:$Va,54:$Vg,69:48,76:$Vn,87:$Vo,89:$Vp,93:128,94:46,95:$Vq},o($VB,[2,90]),o($VB,[2,91]),o($VB,[2,93]),o([5,6,24,26,33,40,45,46,60,62,63,65,73,78,79,80,81,82,83,84,85,87,89,90,92,96],[2,98],{94:129,29:$V3,76:$Vn,95:$Vq}),{33:$VM},{54:[1,131]},{23:132,29:$V3,46:$Va,54:$Vg,69:48,76:$Vn,77:35,87:$Vo,88:41,89:$Vp,91:42,93:43,94:46,95:$Vq},{1:[2,2]},o($Vr,[2,6]),{17:134,23:135,25:133,29:$V3,46:$Va,54:$Vg,69:48,76:$Vn,77:35,87:$Vo,88:41,89:$Vp,91:42,93:43,94:46,95:$Vq},o($Vr,[2,53]),o($Vr,$Vt,{24:$Vu}),{23:59,29:$V3,32:136,46:$Va,54:$Vg,69:48,76:$Vn,77:35,87:$Vo,88:41,89:$Vp,91:42,93:43,94:46,95:$Vq},o($Vr,[2,54]),o($Vs,$VN,{64:[1,137]}),{23:138,29:$V3,46:$Va,54:$Vg,69:48,76:$Vn,77:35,87:$Vo,88:41,89:$Vp,91:42,93:43,94:46,95:$Vq},o($Vr,[2,61],{65:$VO}),o($VP,[2,65]),o($VP,[2,66],{72:[1,140]}),o($Vr,[2,63],{65:$VO}),{23:141,29:$V3,46:$Va,54:$Vg,69:48,76:$Vn,77:35,87:$Vo,88:41,89:$Vp,91:42,93:43,94:46,95:$Vq},{54:[1,142]},{23:143,29:$V3,46:$Va,54:$Vg,69:48,76:$Vn,77:35,87:$Vo,88:41,89:$Vp,91:42,93:43,94:46,95:$Vq},{23:59,29:$V3,32:144,46:$Va,54:$Vg,69:48,76:$Vn,77:35,87:$Vo,88:41,89:$Vp,91:42,93:43,94:46,95:$Vq},o($Vr,[2,52]),{26:[1,145],65:$VF},{54:$Vg,69:146},{23:147,29:$V3,46:$Va,54:$Vg,69:48,76:$Vn,77:35,87:$Vo,88:41,89:$Vp,91:42,93:43,94:46,95:$Vq},{6:[1,148]},{6:[2,40]},{6:[2,41]},{33:[1,149],84:$VQ,85:$VR},{78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX},{23:117,29:$VI,31:158,46:$Va,54:$Vg,69:48,76:$Vn,77:35,86:$VJ,87:$Vo,88:41,89:$Vp,91:42,93:43,94:46,95:$Vq},{23:160,29:$VI,31:159,46:$Va,54:$Vg,69:48,76:$Vn,77:35,86:$VJ,87:$Vo,88:41,89:$Vp,91:42,93:43,94:46,95:$Vq},{6:$VY,26:[1,161]},o($VK,[2,4]),{33:[1,164]},{33:[1,165],84:$VQ,85:$VR},o($Vx,[2,83],{90:$Vy}),o($Vx,[2,84],{90:$Vy}),{23:166,29:$V3,46:$Va,54:$Vg,69:48,76:$Vn,77:35,87:$Vo,88:41,89:$Vp,91:42,93:43,94:46,95:$Vq},o($Vz,[2,86],{92:$VA}),o($VB,[2,88]),o($VD,[2,99]),o($VD,[2,97]),o($VD,[2,101],{72:[1,167]}),{73:[1,168]},{6:[1,170],26:[1,169]},o($VK,[2,24]),{60:$Vv},{26:[1,171],65:$VF},{24:[1,172]},o($VG,[2,59]),{54:$VH,71:173},{23:174,29:$V3,46:$Va,54:$Vg,69:48,76:$Vn,77:35,87:$Vo,88:41,89:$Vp,91:42,93:43,94:46,95:$Vq},o($Vr,[2,51]),o($Vr,[2,68]),{33:[1,175]},{33:[1,176],65:$VF},o([5,6,26,40,45,62,63],[2,56]),{29:[1,177],96:$VC},o($Vr,[2,71]),{23:117,29:$VI,31:178,46:$Va,54:$Vg,69:48,76:$Vn,77:35,86:$VJ,87:$Vo,88:41,89:$Vp,91:42,93:43,94:46,95:$Vq},{24:[1,179]},{23:117,29:$VI,31:180,46:$Va,54:$Vg,69:48,76:$Vn,77:35,86:$VJ,87:$Vo,88:41,89:$Vp,91:42,93:43,94:46,95:$Vq},{23:117,29:$VI,31:181,46:$Va,54:$Vg,69:48,76:$Vn,77:35,86:$VJ,87:$Vo,88:41,89:$Vp,91:42,93:43,94:46,95:$Vq},{23:182,29:$V3,46:$Va,54:$Vg,69:48,76:$Vn,77:35,87:$Vo,88:41,89:$Vp,91:42,93:43,94:46,95:$Vq},{23:183,29:$V3,46:$Va,54:$Vg,69:48,76:$Vn,77:35,87:$Vo,88:41,89:$Vp,91:42,93:43,94:46,95:$Vq},{23:184,29:$V3,46:$Va,54:$Vg,69:48,76:$Vn,77:35,87:$Vo,88:41,89:$Vp,91:42,93:43,94:46,95:$Vq},{23:185,29:$V3,46:$Va,54:$Vg,69:48,76:$Vn,77:35,87:$Vo,88:41,89:$Vp,91:42,93:43,94:46,95:$Vq},{23:186,29:$V3,46:$Va,54:$Vg,69:48,76:$Vn,77:35,87:$Vo,88:41,89:$Vp,91:42,93:43,94:46,95:$Vq},{23:187,29:$V3,46:$Va,54:$Vg,69:48,76:$Vn,77:35,87:$Vo,88:41,89:$Vp,91:42,93:43,94:46,95:$Vq},o($VZ,[2,81]),{33:[1,188],84:$VQ,85:$VR},{33:$VM,78:$VS,79:$VT,80:$VU,81:$VV,82:$VW,83:$VX},{34:[1,189]},o($VK,[2,3]),{8:93,9:4,10:5,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:$V0,23:23,24:$V1,27:27,28:$V2,29:$V3,34:$V4,35:$V5,36:$V6,38:$V7,41:$V8,42:$V9,46:$Va,48:$Vb,50:$Vc,51:$Vd,52:$Ve,53:$Vf,54:$Vg,57:$Vh,59:$Vi,61:18,68:$Vj,69:48,70:$Vk,74:$Vl,75:$Vm,76:$Vn,77:35,87:$Vo,88:41,89:$Vp,91:42,93:43,94:46,95:$Vq},{24:[1,190]},{24:[1,191]},o($Vr,[2,48]),{23:192,29:$V3,46:$Va,54:$Vg,69:48,76:$Vn,77:35,87:$Vo,88:41,89:$Vp,91:42,93:43,94:46,95:$Vq},o($VD,[2,102]),o($Vr,[2,21]),o($VK,[2,23],{77:35,88:41,91:42,93:43,94:46,69:48,23:135,17:193,29:$V3,46:$Va,54:$Vg,76:$Vn,87:$Vo,89:$Vp,95:$Vq}),o($Vr,$VN),{23:59,29:$V3,32:194,46:$Va,54:$Vg,69:48,76:$Vn,77:35,87:$Vo,88:41,89:$Vp,91:42,93:43,94:46,95:$Vq},o($VP,[2,64]),{73:[1,195]},o($Vr,[2,69]),o($Vr,[2,70]),{23:196,29:$V3,46:$Va,54:$Vg,69:48,76:$Vn,77:35,87:$Vo,88:41,89:$Vp,91:42,93:43,94:46,95:$Vq},{6:[1,197],84:$VQ,85:$VR},o($VK,$VL,{8:3,9:4,10:5,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,61:18,23:23,27:27,77:35,88:41,91:42,93:43,94:46,69:48,4:121,7:198,22:$V0,24:$V1,28:$V2,29:$V3,34:$V4,35:$V5,36:$V6,38:$V7,41:$V8,42:$V9,46:$Va,48:$Vb,50:$Vc,51:$Vd,52:$Ve,53:$Vf,54:$Vg,57:$Vh,59:$Vi,68:$Vj,70:$Vk,74:$Vl,75:$Vm,76:$Vn,87:$Vo,89:$Vp,95:$Vq}),o($VZ,[2,79]),o([6,33,85],[2,80],{84:$VQ}),o($VZ,[2,73]),o($VZ,[2,74]),o($VZ,[2,75]),o($VZ,[2,76]),o($VZ,[2,77]),o($VZ,[2,78]),o($VZ,[2,82]),{29:[1,199]},{37:200,40:$V_,44:201,45:$V$},o($VK,$VL,{8:3,9:4,10:5,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,61:18,23:23,27:27,77:35,88:41,91:42,93:43,94:46,69:48,4:121,7:204,22:$V0,24:$V1,28:$V2,29:$V3,34:$V4,35:$V5,36:$V6,38:$V7,41:$V8,42:$V9,46:$Va,48:$Vb,50:$Vc,51:$Vd,52:$Ve,53:$Vf,54:$Vg,57:$Vh,59:$Vi,68:$Vj,70:$Vk,74:$Vl,75:$Vm,76:$Vn,87:$Vo,89:$Vp,95:$Vq}),{73:[1,205]},o($VK,[2,22]),{26:[1,206],65:$VF},o($VP,[2,67]),{33:[1,207]},{23:59,29:$V3,32:208,46:$Va,54:$Vg,69:48,76:$Vn,77:35,87:$Vo,88:41,89:$Vp,91:42,93:43,94:46,95:$Vq},{6:$VY,26:[1,209]},{23:117,29:$VI,31:210,46:$Va,54:$Vg,69:48,76:$Vn,77:35,86:$VJ,87:$Vo,88:41,89:$Vp,91:42,93:43,94:46,95:$Vq},{26:[1,211],40:$V_,44:212,45:$V$},o($V01,[2,37]),{23:213,29:$V3,46:$Va,54:$Vg,69:48,76:$Vn,77:35,87:$Vo,88:41,89:$Vp,91:42,93:43,94:46,95:$Vq},{4:214,8:3,9:4,10:5,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:$V0,23:23,24:$V1,27:27,28:$V2,29:$V3,34:$V4,35:$V5,36:$V6,38:$V7,41:$V8,42:$V9,46:$Va,48:$Vb,50:$Vc,51:$Vd,52:$Ve,53:$Vf,54:$Vg,57:$Vh,59:$Vi,61:18,68:$Vj,69:48,70:$Vk,74:$Vl,75:$Vm,76:$Vn,77:35,87:$Vo,88:41,89:$Vp,91:42,93:43,94:46,95:$Vq},{6:$VY,26:[1,215]},o($VD,[2,100]),o($Vr,[2,55]),o($Vr,[2,62]),{33:[1,216],65:$VF},o($Vr,[2,27]),{33:[1,217],84:$VQ,85:$VR},o($Vr,[2,29]),o($V01,[2,36]),{46:[1,218]},o($V01,[2,39],{6:$V11}),o($V21,[2,35],{39:219}),{24:[1,220]},o($Vr,[2,28]),{4:221,8:3,9:4,10:5,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:$V0,23:23,24:$V1,27:27,28:$V2,29:$V3,34:$V4,35:$V5,36:$V6,38:$V7,41:$V8,42:$V9,46:$Va,48:$Vb,50:$Vc,51:$Vd,52:$Ve,53:$Vf,54:$Vg,57:$Vh,59:$Vi,61:18,68:$Vj,69:48,70:$Vk,74:$Vl,75:$Vm,76:$Vn,77:35,87:$Vo,88:41,89:$Vp,91:42,93:43,94:46,95:$Vq},o($Vr,[2,30],{43:[1,223]}),o($VK,$VL,{8:3,9:4,10:5,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,61:18,23:23,27:27,77:35,88:41,91:42,93:43,94:46,69:48,4:121,7:224,22:$V0,24:$V1,28:$V2,29:$V3,34:$V4,35:$V5,36:$V6,38:$V7,41:$V8,42:$V9,46:$Va,48:$Vb,50:$Vc,51:$Vd,52:$Ve,53:$Vf,54:$Vg,57:$Vh,59:$Vi,68:$Vj,70:$Vk,74:$Vl,75:$Vm,76:$Vn,87:$Vo,89:$Vp,95:$Vq}),o($V01,[2,38],{6:$V11}),{24:[1,225]},{29:[1,226]},{6:$VY,26:[1,227]},o($VK,$VL,{8:3,9:4,10:5,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,61:18,23:23,27:27,77:35,88:41,91:42,93:43,94:46,69:48,4:121,7:228,22:$V0,24:$V1,28:$V2,29:$V3,34:$V4,35:$V5,36:$V6,38:$V7,41:$V8,42:$V9,46:$Va,48:$Vb,50:$Vc,51:$Vd,52:$Ve,53:$Vf,54:$Vg,57:$Vh,59:$Vi,68:$Vj,70:$Vk,74:$Vl,75:$Vm,76:$Vn,87:$Vo,89:$Vp,95:$Vq}),{23:117,29:$VI,31:229,46:$Va,54:$Vg,69:48,76:$Vn,77:35,86:$VJ,87:$Vo,88:41,89:$Vp,91:42,93:43,94:46,95:$Vq},o($Vr,[2,26]),{6:$VY,26:[1,230]},{33:[1,231],84:$VQ,85:$VR},o($Vr,[2,31]),{24:[1,232]},{4:233,8:3,9:4,10:5,11:6,12:7,13:8,14:9,15:10,16:11,17:12,18:13,19:14,20:15,21:16,22:$V0,23:23,24:$V1,27:27,28:$V2,29:$V3,34:$V4,35:$V5,36:$V6,38:$V7,41:$V8,42:$V9,46:$Va,48:$Vb,50:$Vc,51:$Vd,52:$Ve,53:$Vf,54:$Vg,57:$Vh,59:$Vi,61:18,68:$Vj,69:48,70:$Vk,74:$Vl,75:$Vm,76:$Vn,77:35,87:$Vo,88:41,89:$Vp,91:42,93:43,94:46,95:$Vq},{6:$V11,26:[1,234]},o($V21,[2,34])],
defaultActions: {53:[2,1],92:[2,2],114:[2,40],115:[2,41]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

const util = require('util');
function setLines(dst, first, last) {
    last = last || first;
    dst.first_line = first.first_line;
    dst.first_column = first.first_column;
    dst.last_line = last.last_line;
    dst.last_column = last.last_column;
}
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: /* skip whitespace */ 
break;
case 1: /* console.log("MULTILINE COMMENT: "+yy_.yytext); */  
break;
case 2: /* console.log("SINGLE LINE COMMENT: "+yy_.yytext); */ 
break;
case 3: return 59; 
break;
case 4: return 66; 
break;
case 5: return 70; 
break;
case 6: return 74; 
break;
case 7: return 57; 
break;
case 8: return 62; 
break;
case 9: return 63; 
break;
case 10: return 64; 
break;
case 11: return 68; 
break;
case 12: return 48 
break;
case 13: return 50 
break;
case 14: return 51 
break;
case 15: return 53 
break;
case 16: return 52 
break;
case 17: return 'challenge' 
break;
case 18: return 28 
break;
case 19: return 34 
break;
case 20: return 35 
break;
case 21: return 42 
break;
case 22: return 41 
break;
case 23: return 38 
break;
case 24: return 43 
break;
case 25: return 40 
break;
case 26: return 36 
break;
case 27: return 45 
break;
case 28: return 22 
break;
case 29: return 75 
break;
case 30: return 'aggregable' 
break;
case 31: return 'stage' 
break;
case 32: return 'function' 
break;
case 33: return 'return' 
break;
case 34: return '...' 
break;
case 35: return '..' 
break;
case 36: yy_.yytext = yy_.yytext.replace(/\_/g, ""); return 95; 
break;
case 37: yy_.yytext = yy_.yytext.slice(1,-1); return 58; 
break;
case 38: return 54; 
break;
case 39: yy_.yytext = yy_.yytext.slice(1); return 76; 
break;
case 40: return 92; 
break;
case 41: return 87; 
break;
case 42: return 89; 
break;
case 43: return 90; 
break;
case 44: return "'"; 
break;
case 45: return 6; 
break;
case 46: return 65; 
break;
case 47: return 97; 
break;
case 48: return 84; 
break;
case 49: return 85; 
break;
case 50: return 80; 
break;
case 51: return 81; 
break;
case 52: return 82; 
break;
case 53: return 83; 
break;
case 54: return 60; 
break;
case 55: return 79; 
break;
case 56: return 78; 
break;
case 57: return 55; 
break;
case 58: return 29; 
break;
case 59: return 33; 
break;
case 60: return 72; 
break;
case 61: return 73; 
break;
case 62: return 24; 
break;
case 63: return 26; 
break;
case 64: return 46; 
break;
case 65: return 86; 
break;
case 66: return 5; 
break;
case 67: console.log("INVALID: " + yy_.yytext); return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\*([^*]|[\r\n]|(\*+([^*/]|[\r\n])))*\*+\/)/,/^(?:\/\/.*)/,/^(?:pol\b)/,/^(?:commit\b)/,/^(?:constant\b)/,/^(?:namespace\b)/,/^(?:include\b)/,/^(?:in\b)/,/^(?:is\b)/,/^(?:connect\b)/,/^(?:public\b)/,/^(?:var\b)/,/^(?:expr\b)/,/^(?:refpol\b)/,/^(?:refvar\b)/,/^(?:refexpr\b)/,/^(?:challenge\b)/,/^(?:for\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:if\b)/,/^(?:elseif\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:when\b)/,/^(?:subproof\b)/,/^(?:aggregable\b)/,/^(?:stage\b)/,/^(?:function\b)/,/^(?:return\b)/,/^(?:\.\.\.)/,/^(?:\.\.)/,/^(?:(0x[0-9A-Fa-f][0-9A-Fa-f_]*)|([0-9][0-9_]*))/,/^(?:"[^"]+")/,/^(?:[a-zA-Z_][a-zA-Z$_0-9]*)/,/^(?:%[a-zA-Z_][a-zA-Z$_0-9]*)/,/^(?:\*\*)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:')/,/^(?:;)/,/^(?:,)/,/^(?:\.)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:<)/,/^(?:>)/,/^(?:<=)/,/^(?:>=)/,/^(?:===)/,/^(?:!=)/,/^(?:==)/,/^(?:=)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?::)/,/^(?:!)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = pil_parser;
exports.Parser = pil_parser.Parser;
exports.parse = function () { return pil_parser.parse.apply(pil_parser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}