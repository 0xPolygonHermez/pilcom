/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var pil_parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[2,16],$V1=[1,17],$V2=[1,15],$V3=[1,18],$V4=[1,44],$V5=[1,53],$V6=[1,35],$V7=[1,36],$V8=[1,37],$V9=[1,24],$Va=[1,48],$Vb=[1,21],$Vc=[1,32],$Vd=[1,22],$Ve=[1,23],$Vf=[1,31],$Vg=[1,33],$Vh=[1,34],$Vi=[1,28],$Vj=[1,51],$Vk=[1,29],$Vl=[1,25],$Vm=[1,26],$Vn=[1,30],$Vo=[1,52],$Vp=[1,45],$Vq=[1,46],$Vr=[1,49],$Vs=[1,50],$Vt=[5,12],$Vu=[1,59],$Vv=[5,12,17,20,22,23,24,36,37,38,39,49,56,57,59,60,61,65,67,75,79,96,97,98,99,100,110,112,118,119],$Vw=[5,12,15,57],$Vx=[5,12,15,17,20,22,23,24,36,37,38,39,49,56,57,59,60,61,65,67,68,70,75,79,96,97,98,99,100,110,112,118,119],$Vy=[1,71],$Vz=[23,33,81],$VA=[1,77],$VB=[1,78],$VC=[1,80],$VD=[1,81],$VE=[1,89],$VF=[1,90],$VG=[2,162],$VH=[1,93],$VI=[1,94],$VJ=[1,95],$VK=[5,11,12,15,26,30,35,44,49,57,64,83,88,101,102,103,104,105,106,107,108,110,112],$VL=[1,96],$VM=[5,11,12,15,24,26,30,35,44,49,57,64,72,83,88,101,102,103,104,105,106,107,108,110,112,113,115,118,119],$VN=[5,11,12,15,26,30,35,44,49,57,64,83,88,101,102,103,104,105,106,107,108,110,112,113],$VO=[1,98],$VP=[2,175],$VQ=[1,99],$VR=[5,11,12,15,26,30,35,44,49,57,64,83,88,101,102,103,104,105,106,107,108,110,112,113,115],$VS=[5,11,12,15,24,26,30,34,35,44,49,57,64,72,83,88,101,102,103,104,105,106,107,108,110,112,113,115,118,119,121],$VT=[1,110],$VU=[1,113],$VV=[1,114],$VW=[1,117],$VX=[5,12,17,20,22,23,24,36,37,38,39,49,56,57,59,60,61,65,67,68,70,75,79,96,97,98,99,100,110,112,118,119],$VY=[1,127],$VZ=[1,128],$V_=[1,129],$V$=[5,12,15,26,30,35,57],$V01=[1,144],$V11=[1,143],$V21=[5,12,15,57,64],$V31=[1,151],$V41=[1,159],$V51=[1,162],$V61=[1,164],$V71=[30,35],$V81=[1,168],$V91=[1,177],$Va1=[1,178],$Vb1=[1,179],$Vc1=[1,180],$Vd1=[5,12,15,57,72],$Ve1=[5,12,15,30,57,72,78],$Vf1=[5,12,15,30,34,57,72,78],$Vg1=[15,64],$Vh1=[1,197],$Vi1=[1,198],$Vj1=[1,205],$Vk1=[1,199],$Vl1=[1,200],$Vm1=[1,201],$Vn1=[1,202],$Vo1=[1,203],$Vp1=[1,204],$Vq1=[5,12,15,26,30,57,64],$Vr1=[1,216],$Vs1=[1,221],$Vt1=[26,30,35],$Vu1=[12,15],$Vv1=[26,30],$Vw1=[23,33],$Vx1=[15,26,107,108],$Vy1=[1,265],$Vz1=[1,266],$VA1=[1,268],$VB1=[1,267],$VC1=[30,35,49,83,88],$VD1=[12,30],$VE1=[1,296],$VF1=[1,295],$VG1=[12,68,70];
var parser = {trace: function trace () {
        Jison.print.apply(null, arguments);
    },
yy: {},
symbols_: {"error":2,"all_statements":3,"statement_block":4,"EOF":5,"delimited_statement":6,"non_delimited_statement":7,"statement_no_closed":8,"statement_closed":9,"lcs":10,"{":11,"}":12,"statement_list":13,"statement_list_closed":14,"CS":15,"codeblock_closed":16,"WHEN":17,"expression":18,"when_body":19,"METADATA":20,"data_object":21,"FUNCTION":22,"IDENTIFIER":23,"(":24,"arguments":25,")":26,"RETURNS":27,"return_type":28,"arguments_list":29,",":30,"argument":31,"argument_type":32,"REFERENCE":33,"[":34,"]":35,"INTEGER":36,"FE":37,"EXPR":38,"COL":39,"codeblock_no_closed":40,"col_declaration":41,"namespace_definition":42,"subproof_definition":43,"===":44,"include_directive":45,"public_declaration":46,"constant_definition":47,"data_array":48,":":49,"constraint":50,"function_call":51,"name_reference":52,"expression_list":53,"variable_declaration":54,"variable_assignment":55,"DO":56,"WHILE":57,"conditional_expression":58,"CONTINUE":59,"BREAK":60,"FOR":61,"for_init":62,"variable_assignment_list":63,"IN":64,"SWITCH":65,"case_list":66,"IF":67,"ELSE":68,"case_item":69,"CASE":70,"variable_init":71,"=":72,"range_definition":73,"pol_id":74,"INCLUDE":75,"flexible_string":76,"stage_definition":77,"STAGE":78,"NUMBER":79,"STRING":80,"TEMPLATE_STRING":81,"range_list":82,"DOTS_FILL":83,"range":84,"DOTS_ARITH_SEQ":85,"DOTS_GEOM_SEQ":86,"e5":87,"DOTS_RANGE":88,"col_type":89,"WITNESS":90,"FIXED":91,"col_declaration_array":92,"col_declaration_item":93,"col_declaration_ident":94,"col_declaration_list":95,"PUBLIC":96,"NAMESPACE":97,"SUBPROOF":98,"CONSTANT":99,"CONSTANTID":100,"EQ":101,"NE":102,"LT":103,"GT":104,"LE":105,"GE":106,"AND":107,"OR":108,"!":109,"+":110,"e4":111,"-":112,"*":113,"e3":114,"POW":115,"e2":116,"e1":117,"INC":118,"DEC":119,"name_optional_index":120,"'":121,".":122,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",11:"{",12:"}",15:"CS",17:"WHEN",20:"METADATA",22:"FUNCTION",23:"IDENTIFIER",24:"(",26:")",27:"RETURNS",30:",",33:"REFERENCE",34:"[",35:"]",36:"INTEGER",37:"FE",38:"EXPR",39:"COL",44:"===",49:":",56:"DO",57:"WHILE",59:"CONTINUE",60:"BREAK",61:"FOR",64:"IN",65:"SWITCH",67:"IF",68:"ELSE",70:"CASE",72:"=",75:"INCLUDE",78:"STAGE",79:"NUMBER",80:"STRING",81:"TEMPLATE_STRING",83:"DOTS_FILL",85:"DOTS_ARITH_SEQ",86:"DOTS_GEOM_SEQ",88:"DOTS_RANGE",90:"WITNESS",91:"FIXED",96:"PUBLIC",97:"NAMESPACE",98:"SUBPROOF",99:"CONSTANT",100:"CONSTANTID",101:"EQ",102:"NE",103:"LT",104:"GT",105:"LE",106:"GE",107:"AND",108:"OR",109:"!",110:"+",112:"-",113:"*",115:"POW",118:"INC",119:"DEC",121:"'",122:"."},
productions_: [0,[3,2],[6,1],[6,1],[7,1],[7,2],[7,2],[7,3],[13,1],[13,2],[13,1],[14,2],[14,3],[14,1],[14,2],[4,1],[4,0],[10,2],[10,1],[9,1],[9,5],[9,4],[9,10],[9,8],[25,1],[25,0],[29,3],[29,1],[31,2],[31,2],[31,4],[31,4],[32,1],[32,1],[32,1],[32,1],[28,1],[28,1],[28,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,3],[8,1],[8,1],[8,1],[8,2],[8,4],[21,5],[21,7],[21,3],[21,5],[21,5],[48,3],[48,5],[48,5],[48,3],[48,3],[48,1],[19,3],[19,2],[19,1],[51,4],[40,1],[40,1],[40,6],[40,1],[40,1],[16,9],[16,7],[16,5],[16,7],[16,5],[16,7],[66,2],[66,1],[69,4],[69,2],[62,1],[62,1],[54,2],[54,2],[54,2],[71,1],[71,3],[71,3],[71,1],[71,3],[55,3],[55,3],[63,3],[63,1],[45,2],[77,2],[77,0],[50,3],[76,1],[76,1],[73,3],[73,4],[82,3],[82,5],[82,5],[82,3],[82,3],[82,1],[84,3],[84,3],[84,2],[84,3],[84,1],[53,3],[53,3],[53,1],[53,3],[53,1],[89,1],[89,1],[89,0],[92,2],[92,3],[93,1],[93,2],[94,1],[94,1],[94,1],[95,3],[95,1],[41,4],[41,6],[41,6],[46,7],[42,4],[42,5],[43,5],[47,4],[47,4],[18,1],[58,3],[58,3],[58,3],[58,3],[58,3],[58,3],[58,3],[58,3],[58,3],[58,2],[58,3],[87,3],[87,3],[87,1],[111,3],[111,1],[114,3],[114,1],[116,2],[116,2],[116,1],[116,2],[116,1],[116,2],[116,2],[116,2],[116,2],[117,1],[117,1],[117,3],[117,1],[74,2],[74,3],[74,5],[74,1],[120,1],[120,4],[52,3],[52,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

            // console.log(JSON.stringify($$[$0-1], null, 1));
            this.$ = $$[$0-1];
            return this.$
        
break;
case 5: case 6: case 7: case 48: case 62: case 150:

            this.$ = $$[$0-1];
        
break;
case 8: case 40: case 41: case 42: case 43: case 80: case 81: case 98: case 99: case 139: case 153: case 155: case 157: case 160: case 170: case 174: case 175:

            this.$ = $$[$0];
        
break;
case 9: case 11:

            this.$.push($$[$0]);
        
break;
case 10: case 13: case 63: case 115: case 117:

            this.$ = [$$[$0]];
        
break;
case 12:

            this.$.push($$[$0-1]);
        
break;
case 14:

            this.$ = [$$[$0-1]];
        
break;
case 15:

            showcode('R statement_block 1', this._$);
            this.$ = $$[$0];
        
break;
case 19: case 39:

            this.$ = { type: "Code", statments: $$[$0] };
        
break;
case 20:

            this.$ = { type: "When", statments: $$[$0-4] };
        
break;
case 21: case 49:

            this.$ = $$[$0-3];
        
break;
case 44:

            this.$ = {type: "constraint", expression: { op: "sub", values: [$$[$0-2],$$[$0]] }};
            setLines(this.$, _$[$0-2], _$[$0]);
        
break;
case 45: case 46: case 47:

            this.$ = $$[$0]
        
break;
case 61:

            this.$ = $$[$0-2];
            this.$.push($$[$0]);
        
break;
case 64:

           // function call
           this.$ = { type: 'call', function: $$[$0-3], arguments: $$[$0-1] };
           setLines(this.$, _$[$0-3], _$[$0]);
        
break;
case 65:

           this.$ = $$[$0];
           console.log($$[$0]);
           setLines(this.$, _$[$0], _$[$0]);
        
break;
case 66:

            this.$ = $$[$0];
            console.log($$[$0]);
        
break;
case 67:


           setLines(this.$, _$[$0-5], _$[$02]);
        
break;
case 68:

           this.$ = { type: 'continue' };
           setLines(this.$, _$[$0], _$[$0]);
        
break;
case 69:

           this.$ = { type: 'break' };
           setLines(this.$, _$[$0], _$[$0]);
        
break;
case 70:

           this.$ = {type: 'for', init: $$[$0-6], condition: $$[$0-4], increment: $$[$0-2], statments: $$[$0] };
           setLines(this.$, _$[$0-8], _$[$0]);
        
break;
case 71:

           this.$ = {type: 'for', init: $$[$0-4], list: $$[$0-2], statments: $$[$0] };
           setLines(this.$, _$[$0-6], _$[$0]);
        
break;
case 72:

           this.$ = {type: 'while', condition: $$[$0-2], statments: $$[$0] };
           setLines(this.$, _$[$0-4], _$[$0]);
        
break;
case 73:


           setLines(this.$, _$[$0-6], _$[$0]);
        
break;
case 74:

            this.$ = {type:'if', conditions: [{type: 'if', expression: $$[$0-2], statments: $$[$0] }] };
            setLines(this.$, _$[$0-4], _$[$0]);
        
break;
case 75:

           this.$ = { type:'if', conditions: [{type: 'if', expression: $$[$0-4], statments: $$[$0-2] }, {type: 'else', statments: $$[$0]}]};
           setLines(this.$, _$[$0-6], _$[$0]);
        
break;
case 82: case 83:

            this.$ = $$[$0];
            this.$.type = 'var';
        
break;
case 84:

            this.$ = $$[$0];
            this.$.type = 'expr';
        
break;
case 85:

            this.$ = {name: $$[$0]}
        
break;
case 86: case 87:

            this.$ = {name: $$[$0-2], init: $$[$0]};
        
break;
case 88:

            this.$ = {name: $$[$0], reference: true}
        
break;
case 89:

            this.$ = {name: $$[$0-2], reference: true, init: $$[$0]};
        
break;
case 90: case 91:

            this.$ = {type: 'assign', name: $$[$0-2], value: $$[$0]}
            setLines(this.$, $$[$0-2], $$[$0]);
        
break;
case 94:

            this.$ = {type: "Include", file: $$[$0]}
        
break;
case 97:

            this.$ = {type: "PolIdentity", expression: { op: "sub", values: [$$[$0-2],$$[$0]] }};
            setLines(this.$, _$[$0-2], _$[$0]);
        
break;
case 113: case 114:

            $$[$0-2].push($$[$0]);
        
break;
case 116:

            this.$ = [$$[$0-2]];
        
break;
case 133:

            this.$ = {type: "PublicDeclaration", name: $$[$0-5], pol: $$[$0-3], idx: $$[$0-1]}
            setLines(this.$, _$[$0-6], _$[$0-3]);
        
break;
case 134:

            this.$ = {type: "Namespace", name: $$[$0-2], subproof: $$[$0]}
            setLines(this.$, _$[$0-3], _$[$0]);
        
break;
case 135:

            this.$ = {type: "Namespace", name: $$[$0-3], subproof: false, exp: $$[$0-1]}
            setLines(this.$, _$[$0-4], _$[$0]);
        
break;
case 136:

            this.$ = {type: "Subproof", name: $$[$0-3], exp: $$[$0-1]}
            setLines(this.$, _$[$0-4], _$[$0]);
        
break;
case 137: case 138:

            this.$ = {type: "ConstantDefinition", name: $$[$0-2], exp: $$[$0]}
            setLines(this.$, _$[$0-3], _$[$0]);
        
break;
case 140:

            this.$ = { op: "eq", values: [$$[$0-2], $$[$0]] };
            setLines(this.$, _$[$0-2], _$[$0]);
        
break;
case 141:

            this.$ = { op: "ne", values: [$$[$0-2], $$[$0]] };
            setLines(this.$, _$[$0-2], _$[$0]);
        
break;
case 142:

            this.$ = { op: "lt", values: [$$[$0-2], $$[$0]] };
            setLines(this.$, _$[$0-2], _$[$0]);
        
break;
case 143:

            this.$ = { op: "gt", values: [$$[$0-2], $$[$0]] };
            setLines(this.$, _$[$0-2], _$[$0]);
        
break;
case 144:

            this.$ = { op: "le", values: [$$[$0-2], $$[$0]] };
            setLines(this.$, _$[$0-2], _$[$0]);
        
break;
case 145: case 146:

            this.$ = { op: "ge", values: [$$[$0-2], $$[$0]],  };
            setLines(this.$, _$[$0-2], _$[$0]);
        
break;
case 147:

            this.$ = { op: "and", values: [$$[$0-2], $$[$0]] };
            setLines(this.$, _$[$0-2], _$[$0]);
        
break;
case 148:

            this.$ = { op: "or", values: [$$[$0-2], $$[$0]] };
            setLines(this.$, _$[$0-2], _$[$0]);
        
break;
case 149:

            this.$ = { op: "not", values: [$$[$0]] };
            setLines(this.$, _$[$0-1], _$[$0]);
        
break;
case 151:

            // this.$ = yy.parser.calculate.add($$[$0-2],$$[$0]);
            this.$ = { op: "add", values: [$$[$0-2], $$[$0]] };
            setLines(this.$, _$[$0-2], _$[$0]);
        
break;
case 152:

            this.$ = { op: "sub", values: [$$[$0-2], $$[$0]] };
            setLines(this.$, _$[$0-2], _$[$0]);
        
break;
case 154:

            this.$ = { op: "mul", values: [$$[$0-2], $$[$0]] };
            setLines(this.$, _$[$0-2], _$[$0]);
        
break;
case 156:

            this.$ = { op: "pow", values: [$$[$0-2], $$[$0]] };
            setLines(this.$, _$[$0-2], _$[$0]);
        
break;
case 158:

            this.$ = $$[$0];
            setLines(this.$, _$[$0-1], _$[$0]);
        
break;
case 159:

            this.$ = { op: "neg", values: [$$[$0]] };
            setLines(this.$, _$[$0-1], _$[$0]);
        
break;
case 161:

            this.$ = {op: "public", name: $$[$0] }
            setLines(this.$, _$[$0-1], _$[$0]);
        
break;
case 162:

            this.$ = $$[$0]
            setLines(this.$, _$[$0]);
        
break;
case 163: case 164: case 165: case 166:

            this.$ = $$[$0-1]
            setLines(this.$, _$[$0]);
        
break;
case 167:

            this.$ = {op: "number", value: BigInt($$[$0]) }
            setLines(this.$, _$[$0]);
        
break;
case 168:

            this.$ = {op: "constant", name: $$[$0] }
            setLines(this.$, _$[$0]);
        
break;
case 169:

            this.$ = $$[$0-1];
            setLines(this.$, _$[$0-2], _$[$0]);
        
break;
case 171:

            $$[$0-1].next= true;
            this.$ = $$[$0-1];
        
break;
case 172:

            $$[$0-2].next= $$[$0];
            this.$ = $$[$0-2];
        
break;
case 173:

            $$[$0-4].next= $$[$0-2];
            this.$ = $$[$0-4];
        
break;
case 176:

            this.$ = $$[$0-3];
            this.$.idxExp = $$[$0-1];
            setLines(this.$, _$[$0-3], _$[$0-1]);
        
break;
case 177:

            this.$ = {op: "pol", next: false, namespace: $$[$0-2], name: $$[$0]}
            setLines(this.$, _$[$0-2], _$[$0]);
        
break;
case 178:

            this.$ = {op: "pol", next: false, namespace: "this", name: $$[$0]}
            setLines(this.$, _$[$0], _$[$0]);
        
break;
}
},
table: [{3:1,4:2,5:$V0,8:5,9:6,13:3,14:4,16:16,17:$V1,18:11,20:$V2,22:$V3,23:$V4,24:$V5,36:$V6,37:$V7,38:$V8,39:$V9,40:7,41:8,42:9,43:10,45:12,46:13,47:14,49:$Va,51:54,52:42,54:19,55:20,56:$Vb,57:$Vc,59:$Vd,60:$Ve,61:$Vf,65:$Vg,67:$Vh,74:38,75:$Vi,79:$Vj,87:27,96:$Vk,97:$Vl,98:$Vm,99:$Vn,100:$Vo,110:$Vp,111:39,112:$Vq,114:41,116:43,117:47,118:$Vr,119:$Vs,120:40},{1:[3]},{5:[1,55]},o($Vt,[2,15]),o($Vt,[2,8],{40:7,41:8,42:9,43:10,18:11,45:12,46:13,47:14,16:16,54:19,55:20,87:27,74:38,111:39,120:40,114:41,52:42,116:43,117:47,51:54,8:56,9:57,17:$V1,20:$V2,22:$V3,23:$V4,24:$V5,36:$V6,37:$V7,38:$V8,39:$V9,49:$Va,56:$Vb,57:$Vc,59:$Vd,60:$Ve,61:$Vf,65:$Vg,67:$Vh,75:$Vi,79:$Vj,96:$Vk,97:$Vl,98:$Vm,99:$Vn,100:$Vo,110:$Vp,112:$Vq,118:$Vr,119:$Vs}),o($Vt,[2,10],{10:58,15:$Vu}),o($Vv,[2,13]),o($Vw,[2,39]),o($Vw,[2,40]),o($Vw,[2,41]),o($Vw,[2,42]),o($Vw,[2,43],{44:[1,60]}),o($Vw,[2,45]),o($Vw,[2,46]),o($Vw,[2,47]),{11:[1,63],18:61,23:$V4,24:$V5,34:[1,62],49:$Va,51:54,52:42,74:64,79:$Vj,87:27,100:$Vo,110:$Vp,111:39,112:$Vq,114:41,116:43,117:47,118:$Vr,119:$Vs,120:40},o($Vx,[2,19]),{18:65,23:$V4,24:$V5,49:$Va,51:54,52:42,74:64,79:$Vj,87:27,100:$Vo,110:$Vp,111:39,112:$Vq,114:41,116:43,117:47,118:$Vr,119:$Vs,120:40},{23:[1,66]},o($Vw,[2,65]),o($Vw,[2,66]),{6:67,7:68,8:69,9:70,11:$Vy,16:16,17:$V1,18:11,20:$V2,22:$V3,23:$V4,24:$V5,36:$V6,37:$V7,38:$V8,39:$V9,40:7,41:8,42:9,43:10,45:12,46:13,47:14,49:$Va,51:54,52:42,54:19,55:20,56:$Vb,57:$Vc,59:$Vd,60:$Ve,61:$Vf,65:$Vg,67:$Vh,74:38,75:$Vi,79:$Vj,87:27,96:$Vk,97:$Vl,98:$Vm,99:$Vn,100:$Vo,110:$Vp,111:39,112:$Vq,114:41,116:43,117:47,118:$Vr,119:$Vs,120:40},o($Vw,[2,68]),o($Vw,[2,69]),o($Vz,[2,120],{89:72,90:[1,73],91:[1,74]}),{23:[1,75]},{23:[1,76]},o([5,11,12,15,26,30,35,44,49,57,64,101,102,103,104,105,106,107,108],[2,139],{110:$VA,112:$VB}),{76:79,80:$VC,81:$VD},{23:[1,82]},{100:[1,83]},{24:[1,84]},{24:[1,85]},{24:[1,86]},{24:[1,87]},{23:$VE,33:$VF,71:88},{23:$VE,33:$VF,71:91},{23:$VE,33:$VF,71:92},o([5,12,15,44,57,110,112,113,115],$VG,{72:$VH,118:$VI,119:$VJ}),o($VK,[2,153],{113:$VL}),o($VM,[2,174],{121:[1,97]}),o($VN,[2,155],{115:$VO}),o([5,11,12,15,26,30,35,44,49,57,64,72,83,88,101,102,103,104,105,106,107,108,110,112,113,115,118,119,121],$VP,{24:[1,100],34:$VQ}),o($VR,[2,157]),o($VS,[2,178],{122:[1,101]}),{23:$V4,24:$V5,49:$Va,51:54,52:42,74:64,79:$Vj,100:$Vo,110:$Vp,112:$Vq,116:102,117:47,118:$Vr,119:$Vs,120:40},{23:$V4,24:$V5,49:$Va,51:54,52:42,74:64,79:$Vj,100:$Vo,110:$Vp,112:$Vq,116:103,117:47,118:$Vr,119:$Vs,120:40},o($VR,[2,160]),{23:[1,104]},{23:$V4,52:106,74:105,120:40},{23:$V4,52:106,74:107,120:40},o($VR,[2,167]),o($VR,[2,168]),{18:108,23:$V4,24:$V5,49:$Va,51:54,52:42,74:64,79:$Vj,87:27,100:$Vo,110:$Vp,111:39,112:$Vq,114:41,116:43,117:47,118:$Vr,119:$Vs,120:40},o($VR,[2,170]),{1:[2,1]},o($Vt,[2,9],{10:109,15:$Vu}),o($Vv,[2,11]),o($Vv,[2,14],{15:$VT}),o($Vx,[2,18]),{18:111,23:$V4,24:$V5,49:$Va,51:54,52:42,74:64,79:$Vj,87:27,100:$Vo,110:$Vp,111:39,112:$Vq,114:41,116:43,117:47,118:$Vr,119:$Vs,120:40},o($Vw,[2,48]),{11:$VU,18:115,23:$V4,24:$V5,34:$VV,48:112,49:$Va,51:54,52:42,74:64,79:$Vj,87:27,100:$Vo,110:$Vp,111:39,112:$Vq,114:41,116:43,117:47,118:$Vr,119:$Vs,120:40},{21:116,23:$VW},o($VR,$VG,{118:$VI,119:$VJ}),{11:[1,118]},{24:[1,119]},{57:[1,120]},{57:[2,2]},{10:121,15:$Vu,57:[2,3]},o($VX,[2,4],{10:122,15:$Vu}),{4:123,8:5,9:6,12:$V0,13:3,14:4,16:16,17:$V1,18:11,20:$V2,22:$V3,23:$V4,24:$V5,36:$V6,37:$V7,38:$V8,39:$V9,40:7,41:8,42:9,43:10,45:12,46:13,47:14,49:$Va,51:54,52:42,54:19,55:20,56:$Vb,57:$Vc,59:$Vd,60:$Ve,61:$Vf,65:$Vg,67:$Vh,74:38,75:$Vi,79:$Vj,87:27,96:$Vk,97:$Vl,98:$Vm,99:$Vn,100:$Vo,110:$Vp,111:39,112:$Vq,114:41,116:43,117:47,118:$Vr,119:$Vs,120:40},{23:$VY,33:$VZ,81:$V_,93:125,94:126,95:124},o($Vz,[2,118]),o($Vz,[2,119]),{24:[1,131],98:[1,130]},{24:[1,132]},{23:$V4,24:$V5,49:$Va,51:54,52:42,74:64,79:$Vj,100:$Vo,110:$Vp,111:133,112:$Vq,114:41,116:43,117:47,118:$Vr,119:$Vs,120:40},{23:$V4,24:$V5,49:$Va,51:54,52:42,74:64,79:$Vj,100:$Vo,110:$Vp,111:134,112:$Vq,114:41,116:43,117:47,118:$Vr,119:$Vs,120:40},o($Vw,[2,94]),o($V$,[2,98]),o($V$,[2,99]),{72:[1,135]},{72:[1,136]},{23:$V4,36:$V6,37:$V7,38:$V8,52:106,54:138,55:139,62:137,74:140,120:40},{18:142,23:$V4,24:$V01,49:$Va,51:54,52:42,58:141,74:64,79:$Vj,87:27,100:$Vo,109:$V11,110:$Vp,111:39,112:$Vq,114:41,116:43,117:47,118:$Vr,119:$Vs,120:40},{18:145,23:$V4,24:$V5,49:$Va,51:54,52:42,74:64,79:$Vj,87:27,100:$Vo,110:$Vp,111:39,112:$Vq,114:41,116:43,117:47,118:$Vr,119:$Vs,120:40},{18:142,23:$V4,24:$V01,49:$Va,51:54,52:42,58:146,74:64,79:$Vj,87:27,100:$Vo,109:$V11,110:$Vp,111:39,112:$Vq,114:41,116:43,117:47,118:$Vr,119:$Vs,120:40},o($V21,[2,82]),o($V21,[2,85],{72:[1,147]}),o($V21,[2,88],{72:[1,148]}),o($V21,[2,83]),o($V21,[2,84]),{18:149,23:$V4,24:$V5,34:$V31,49:$Va,51:54,52:42,73:150,74:64,79:$Vj,87:27,100:$Vo,110:$Vp,111:39,112:$Vq,114:41,116:43,117:47,118:$Vr,119:$Vs,120:40},o($VR,[2,165]),o($VR,[2,166]),{23:$V4,24:$V5,49:$Va,51:54,52:42,74:64,79:$Vj,100:$Vo,110:$Vp,112:$Vq,114:152,116:43,117:47,118:$Vr,119:$Vs,120:40},o([5,11,12,15,26,30,35,44,49,57,64,72,83,88,101,102,103,104,105,106,107,108,110,112,113,115,118,119],[2,171],{24:[1,154],79:[1,153]}),{23:$V4,24:$V5,49:$Va,51:54,52:42,74:64,79:$Vj,100:$Vo,110:$Vp,112:$Vq,116:155,117:47,118:$Vr,119:$Vs,120:40},{18:156,23:$V4,24:$V5,49:$Va,51:54,52:42,74:64,79:$Vj,87:27,100:$Vo,110:$Vp,111:39,112:$Vq,114:41,116:43,117:47,118:$Vr,119:$Vs,120:40},{18:158,23:$V4,24:$V5,34:$V41,49:$Va,51:54,52:42,53:157,74:64,76:160,79:$Vj,80:$VC,81:$VD,87:27,100:$Vo,110:$Vp,111:39,112:$Vq,114:41,116:43,117:47,118:$Vr,119:$Vs,120:40},{23:[1,161]},o($VR,[2,158]),o($VR,[2,159]),o($VR,[2,161]),o($VR,[2,163]),o([5,11,12,15,24,26,30,35,44,49,57,64,72,83,88,101,102,103,104,105,106,107,108,110,112,113,115,121],$VP,{34:$VQ}),o($VR,[2,164]),{26:$V51},o($Vv,[2,12],{15:$VT}),o($Vx,[2,17]),o($Vw,[2,44]),{30:$V61,35:[1,163]},{21:165,23:$VW},{11:$VU,18:115,23:$V4,24:$V5,34:$VV,48:166,49:$Va,51:54,52:42,74:64,79:$Vj,87:27,100:$Vo,110:$Vp,111:39,112:$Vq,114:41,116:43,117:47,118:$Vr,119:$Vs,120:40},o($V71,[2,60]),{12:[1,167],30:$V81},{49:[1,169]},{18:172,19:170,23:$V4,24:$V5,49:$Va,50:171,51:54,52:42,74:64,79:$Vj,87:27,100:$Vo,110:$Vp,111:39,112:$Vq,114:41,116:43,117:47,118:$Vr,119:$Vs,120:40},{25:173,26:[2,25],29:174,31:175,32:176,36:$V91,37:$Va1,38:$Vb1,39:$Vc1},{24:[1,181]},o($VX,[2,6],{15:$VT}),o($VX,[2,5],{15:$VT}),{12:[1,182]},o($Vd1,[2,96],{77:183,30:[1,184],78:[1,185]}),o($Ve1,[2,129]),o($Ve1,[2,123],{92:186,34:[1,187]}),o($Vf1,[2,125]),o($Vf1,[2,126]),o($Vf1,[2,127]),{23:[1,188]},{18:189,23:$V4,24:$V5,49:$Va,51:54,52:42,74:64,79:$Vj,87:27,100:$Vo,110:$Vp,111:39,112:$Vq,114:41,116:43,117:47,118:$Vr,119:$Vs,120:40},{18:158,23:$V4,24:$V5,34:$V41,49:$Va,51:54,52:42,53:190,74:64,76:160,79:$Vj,80:$VC,81:$VD,87:27,100:$Vo,110:$Vp,111:39,112:$Vq,114:41,116:43,117:47,118:$Vr,119:$Vs,120:40},o($VK,[2,151],{113:$VL}),o($VK,[2,152],{113:$VL}),{23:$V4,52:106,74:191,120:40},{18:192,23:$V4,24:$V5,34:$V31,49:$Va,51:54,52:42,73:193,74:64,79:$Vj,87:27,100:$Vo,110:$Vp,111:39,112:$Vq,114:41,116:43,117:47,118:$Vr,119:$Vs,120:40},{15:[1,194],64:[1,195]},o($Vg1,[2,80]),o($Vg1,[2,81]),{72:$VH},{26:[1,196],107:$Vh1,108:$Vi1},{64:$Vj1,101:$Vk1,102:$Vl1,103:$Vm1,104:$Vn1,105:$Vo1,106:$Vp1},{18:142,23:$V4,24:$V01,49:$Va,51:54,52:42,58:206,74:64,79:$Vj,87:27,100:$Vo,109:$V11,110:$Vp,111:39,112:$Vq,114:41,116:43,117:47,118:$Vr,119:$Vs,120:40},{18:208,23:$V4,24:$V01,49:$Va,51:54,52:42,58:207,74:64,79:$Vj,87:27,100:$Vo,109:$V11,110:$Vp,111:39,112:$Vq,114:41,116:43,117:47,118:$Vr,119:$Vs,120:40},{26:[1,209]},{26:[1,210],107:$Vh1,108:$Vi1},{18:211,23:$V4,24:$V5,34:$V31,49:$Va,51:54,52:42,73:212,74:64,79:$Vj,87:27,100:$Vo,110:$Vp,111:39,112:$Vq,114:41,116:43,117:47,118:$Vr,119:$Vs,120:40},{18:213,23:$V4,24:$V5,49:$Va,51:54,52:42,74:64,79:$Vj,87:27,100:$Vo,110:$Vp,111:39,112:$Vq,114:41,116:43,117:47,118:$Vr,119:$Vs,120:40},o($Vq1,[2,90]),o($Vq1,[2,91]),{23:$V4,24:$V5,34:$Vr1,49:$Va,51:54,52:42,74:64,79:$Vj,82:214,84:215,87:217,100:$Vo,110:$Vp,111:39,112:$Vq,114:41,116:43,117:47,118:$Vr,119:$Vs,120:40},o($VN,[2,154],{115:$VO}),o($VM,[2,172]),{18:218,23:$V4,24:$V5,49:$Va,51:54,52:42,74:64,79:$Vj,87:27,100:$Vo,110:$Vp,111:39,112:$Vq,114:41,116:43,117:47,118:$Vr,119:$Vs,120:40},o($VR,[2,156]),{35:[1,219]},{26:[1,220],30:$Vs1},o($Vt1,[2,115]),{18:158,23:$V4,24:$V5,34:$V41,49:$Va,51:54,52:42,53:222,74:64,76:160,79:$Vj,80:$VC,81:$VD,87:27,100:$Vo,110:$Vp,111:39,112:$Vq,114:41,116:43,117:47,118:$Vr,119:$Vs,120:40},o($Vt1,[2,117]),o($VS,[2,177]),o($VR,[2,169]),o($Vw,[2,49]),{11:[1,224],18:223,23:$V4,24:$V5,34:[1,225],49:$Va,51:54,52:42,74:64,79:$Vj,87:27,100:$Vo,110:$Vp,111:39,112:$Vq,114:41,116:43,117:47,118:$Vr,119:$Vs,120:40},{12:[1,226],30:$V81},{30:$V61,35:[1,227]},o($Vx,[2,21]),{23:[1,228]},{11:[1,230],18:229,23:$V4,24:$V5,34:[1,231],49:$Va,51:54,52:42,74:64,79:$Vj,87:27,100:$Vo,110:$Vp,111:39,112:$Vq,114:41,116:43,117:47,118:$Vr,119:$Vs,120:40},{12:[1,232],15:[1,233]},o($Vu1,[2,63]),{44:[1,234]},{26:[1,235]},{26:[2,24],30:[1,236]},o($Vv1,[2,27]),{23:[1,237],33:[1,238]},o($Vw1,[2,32]),o($Vw1,[2,33]),o($Vw1,[2,34]),o($Vw1,[2,35]),{18:142,23:$V4,24:$V01,49:$Va,51:54,52:42,58:239,74:64,79:$Vj,87:27,100:$Vo,109:$V11,110:$Vp,111:39,112:$Vq,114:41,116:43,117:47,118:$Vr,119:$Vs,120:40},o($Vx,[2,7]),o($Vw,[2,130],{72:[1,240]}),{23:$VY,33:$VZ,81:$V_,93:241,94:126},{79:[1,242]},o($Ve1,[2,124]),{18:158,23:$V4,24:$V5,34:$V41,35:[1,243],49:$Va,51:54,52:42,53:244,74:64,76:160,79:$Vj,80:$VC,81:$VD,87:27,100:$Vo,110:$Vp,111:39,112:$Vq,114:41,116:43,117:47,118:$Vr,119:$Vs,120:40},o($Vw,[2,134]),{26:[1,245]},{26:[1,246],30:$Vs1},{24:[1,247]},o($Vw,[2,137]),o($Vw,[2,138]),{18:142,23:$V4,24:$V01,49:$Va,51:54,52:42,58:248,74:64,79:$Vj,87:27,100:$Vo,109:$V11,110:$Vp,111:39,112:$Vq,114:41,116:43,117:47,118:$Vr,119:$Vs,120:40},{18:249,23:$V4,24:$V5,49:$Va,51:54,52:42,74:64,79:$Vj,87:27,100:$Vo,110:$Vp,111:39,112:$Vq,114:41,116:43,117:47,118:$Vr,119:$Vs,120:40},{7:250,8:251,9:70,11:$Vy,16:16,17:$V1,18:11,20:$V2,22:$V3,23:$V4,24:$V5,36:$V6,37:$V7,38:$V8,39:$V9,40:7,41:8,42:9,43:10,45:12,46:13,47:14,49:$Va,51:54,52:42,54:19,55:20,56:$Vb,57:$Vc,59:$Vd,60:$Ve,61:$Vf,65:$Vg,67:$Vh,74:38,75:$Vi,79:$Vj,87:27,96:$Vk,97:$Vl,98:$Vm,99:$Vn,100:$Vo,110:$Vp,111:39,112:$Vq,114:41,116:43,117:47,118:$Vr,119:$Vs,120:40},{18:142,23:$V4,24:$V01,49:$Va,51:54,52:42,58:252,74:64,79:$Vj,87:27,100:$Vo,109:$V11,110:$Vp,111:39,112:$Vq,114:41,116:43,117:47,118:$Vr,119:$Vs,120:40},{18:142,23:$V4,24:$V01,49:$Va,51:54,52:42,58:253,74:64,79:$Vj,87:27,100:$Vo,109:$V11,110:$Vp,111:39,112:$Vq,114:41,116:43,117:47,118:$Vr,119:$Vs,120:40},{18:254,23:$V4,24:$V5,49:$Va,51:54,52:42,74:64,79:$Vj,87:27,100:$Vo,110:$Vp,111:39,112:$Vq,114:41,116:43,117:47,118:$Vr,119:$Vs,120:40},{18:255,23:$V4,24:$V5,49:$Va,51:54,52:42,74:64,79:$Vj,87:27,100:$Vo,110:$Vp,111:39,112:$Vq,114:41,116:43,117:47,118:$Vr,119:$Vs,120:40},{18:256,23:$V4,24:$V5,49:$Va,51:54,52:42,74:64,79:$Vj,87:27,100:$Vo,110:$Vp,111:39,112:$Vq,114:41,116:43,117:47,118:$Vr,119:$Vs,120:40},{18:257,23:$V4,24:$V5,49:$Va,51:54,52:42,74:64,79:$Vj,87:27,100:$Vo,110:$Vp,111:39,112:$Vq,114:41,116:43,117:47,118:$Vr,119:$Vs,120:40},{18:258,23:$V4,24:$V5,49:$Va,51:54,52:42,74:64,79:$Vj,87:27,100:$Vo,110:$Vp,111:39,112:$Vq,114:41,116:43,117:47,118:$Vr,119:$Vs,120:40},{18:259,23:$V4,24:$V5,49:$Va,51:54,52:42,74:64,79:$Vj,87:27,100:$Vo,110:$Vp,111:39,112:$Vq,114:41,116:43,117:47,118:$Vr,119:$Vs,120:40},{18:260,23:$V4,24:$V5,49:$Va,51:54,52:42,74:64,79:$Vj,87:27,100:$Vo,110:$Vp,111:39,112:$Vq,114:41,116:43,117:47,118:$Vr,119:$Vs,120:40},o($Vx1,[2,149]),{26:[1,261],107:$Vh1,108:$Vi1},{26:$V51,64:$Vj1,101:$Vk1,102:$Vl1,103:$Vm1,104:$Vn1,105:$Vo1,106:$Vp1},{11:[1,262]},{7:263,8:251,9:70,11:$Vy,16:16,17:$V1,18:11,20:$V2,22:$V3,23:$V4,24:$V5,36:$V6,37:$V7,38:$V8,39:$V9,40:7,41:8,42:9,43:10,45:12,46:13,47:14,49:$Va,51:54,52:42,54:19,55:20,56:$Vb,57:$Vc,59:$Vd,60:$Ve,61:$Vf,65:$Vg,67:$Vh,74:38,75:$Vi,79:$Vj,87:27,96:$Vk,97:$Vl,98:$Vm,99:$Vn,100:$Vo,110:$Vp,111:39,112:$Vq,114:41,116:43,117:47,118:$Vr,119:$Vs,120:40},o($V21,[2,86]),o($V21,[2,87]),o($V21,[2,89]),{30:$Vy1,35:[1,264]},o($V71,[2,107],{49:$Vz1,83:$VA1,88:$VB1}),{23:$V4,24:$V5,34:$Vr1,49:$Va,51:54,52:42,74:64,79:$Vj,82:269,84:215,87:217,100:$Vo,110:$Vp,111:39,112:$Vq,114:41,116:43,117:47,118:$Vr,119:$Vs,120:40},o($VC1,[2,112],{110:$VA,112:$VB}),{26:[1,270]},o([5,11,12,15,24,26,30,35,44,49,57,64,72,83,88,101,102,103,104,105,106,107,108,110,112,113,115,118,119,121],[2,176]),o($VR,[2,64]),{18:271,23:$V4,24:$V5,49:$Va,51:54,52:42,74:64,76:272,79:$Vj,80:$VC,81:$VD,87:27,100:$Vo,110:$Vp,111:39,112:$Vq,114:41,116:43,117:47,118:$Vr,119:$Vs,120:40},{30:$Vs1,35:[1,273]},o($V71,[2,55]),{21:274,23:$VW},{11:$VU,18:115,23:$V4,24:$V5,34:$VV,48:275,49:$Va,51:54,52:42,74:64,79:$Vj,87:27,100:$Vo,110:$Vp,111:39,112:$Vq,114:41,116:43,117:47,118:$Vr,119:$Vs,120:40},o($V71,[2,58]),o($V71,[2,59]),{49:[1,276]},o($VD1,[2,52]),{21:277,23:$VW},{11:$VU,18:115,23:$V4,24:$V5,34:$VV,48:278,49:$Va,51:54,52:42,74:64,79:$Vj,87:27,100:$Vo,110:$Vp,111:39,112:$Vq,114:41,116:43,117:47,118:$Vr,119:$Vs,120:40},o($Vx,[2,20]),o($Vu1,[2,62],{87:27,111:39,120:40,114:41,52:42,116:43,117:47,51:54,74:64,18:172,50:279,23:$V4,24:$V5,49:$Va,79:$Vj,100:$Vo,110:$Vp,112:$Vq,118:$Vr,119:$Vs}),{18:280,23:$V4,24:$V5,49:$Va,51:54,52:42,74:64,79:$Vj,87:27,100:$Vo,110:$Vp,111:39,112:$Vq,114:41,116:43,117:47,118:$Vr,119:$Vs,120:40},{11:[1,282],27:[1,281]},{31:283,32:176,36:$V91,37:$Va1,38:$Vb1,39:$Vc1},o($Vv1,[2,28],{34:[1,284]}),o($Vv1,[2,29],{34:[1,285]}),{26:[1,286],107:$Vh1,108:$Vi1},{18:287,23:$V4,24:$V5,34:$V31,49:$Va,51:54,52:42,73:288,74:64,79:$Vj,87:27,100:$Vo,110:$Vp,111:39,112:$Vq,114:41,116:43,117:47,118:$Vr,119:$Vs,120:40},o($Ve1,[2,128]),o($Vd1,[2,95]),o($Ve1,[2,121]),{30:$Vs1,35:[1,289]},o($Vw,[2,135]),o($Vw,[2,136]),{18:290,23:$V4,24:$V5,49:$Va,51:54,52:42,74:64,79:$Vj,87:27,100:$Vo,110:$Vp,111:39,112:$Vq,114:41,116:43,117:47,118:$Vr,119:$Vs,120:40},{15:[1,291],107:$Vh1,108:$Vi1},{26:[1,292]},o($Vx,[2,72]),{10:121,15:$Vu},o($Vx1,[2,147]),o([15,26,108],[2,148],{107:$Vh1}),o($Vx1,[2,140]),o($Vx1,[2,141]),o($Vx1,[2,142]),o($Vx1,[2,143]),o($Vx1,[2,144]),o($Vx1,[2,145]),o($Vx1,[2,146]),o($Vx1,[2,150]),{66:293,68:$VE1,69:294,70:$VF1},o([5,12,15,17,20,22,23,24,36,37,38,39,49,56,57,59,60,61,65,67,70,75,79,96,97,98,99,100,110,112,118,119],[2,74],{68:[1,297]}),o($Vq1,[2,100],{83:[1,298]}),{23:$V4,24:$V5,34:$Vr1,49:$Va,51:54,52:42,74:64,79:$Vj,84:299,85:[1,300],86:[1,301],87:217,100:$Vo,110:$Vp,111:39,112:$Vq,114:41,116:43,117:47,118:$Vr,119:$Vs,120:40},{23:$V4,24:$V5,49:$Va,51:54,52:42,74:64,79:$Vj,87:302,100:$Vo,110:$Vp,111:39,112:$Vq,114:41,116:43,117:47,118:$Vr,119:$Vs,120:40},{23:$V4,24:$V5,34:$Vr1,49:$Va,51:54,52:42,74:64,79:$Vj,84:303,87:217,100:$Vo,110:$Vp,111:39,112:$Vq,114:41,116:43,117:47,118:$Vr,119:$Vs,120:40},o($VC1,[2,110]),{30:$Vy1,35:[1,304]},o($VM,[2,173]),o($Vt1,[2,113]),o($Vt1,[2,114]),o($Vt1,[2,116]),{12:[1,305],30:$V81},{30:$V61,35:[1,306]},{11:[1,308],18:307,23:$V4,24:$V5,49:$Va,51:54,52:42,74:64,79:$Vj,87:27,100:$Vo,110:$Vp,111:39,112:$Vq,114:41,116:43,117:47,118:$Vr,119:$Vs,120:40},{12:[1,309],30:$V81},{30:$V61,35:[1,310]},o($Vu1,[2,61]),o($Vu1,[2,97]),{28:311,36:[1,312],37:[1,313],38:[1,314]},{16:315,57:$Vc,61:$Vf,65:$Vg,67:$Vh},o($Vv1,[2,26]),{35:[1,316]},{35:[1,317]},o($Vw,[2,67]),o($Vw,[2,131]),o($Vw,[2,132]),o($Ve1,[2,122]),{26:[1,318]},{23:$V4,52:106,55:320,63:319,74:140,120:40},{7:321,8:251,9:70,11:$Vy,16:16,17:$V1,18:11,20:$V2,22:$V3,23:$V4,24:$V5,36:$V6,37:$V7,38:$V8,39:$V9,40:7,41:8,42:9,43:10,45:12,46:13,47:14,49:$Va,51:54,52:42,54:19,55:20,56:$Vb,57:$Vc,59:$Vd,60:$Ve,61:$Vf,65:$Vg,67:$Vh,74:38,75:$Vi,79:$Vj,87:27,96:$Vk,97:$Vl,98:$Vm,99:$Vn,100:$Vo,110:$Vp,111:39,112:$Vq,114:41,116:43,117:47,118:$Vr,119:$Vs,120:40},{12:[1,322],68:$VE1,69:323,70:$VF1},o($VG1,[2,77]),{18:324,23:$V4,24:$V5,49:$Va,51:54,52:42,74:64,79:$Vj,87:27,100:$Vo,110:$Vp,111:39,112:$Vq,114:41,116:43,117:47,118:$Vr,119:$Vs,120:40},{7:325,8:251,9:70,11:$Vy,16:16,17:$V1,18:11,20:$V2,22:$V3,23:$V4,24:$V5,36:$V6,37:$V7,38:$V8,39:$V9,40:7,41:8,42:9,43:10,45:12,46:13,47:14,49:$Va,51:54,52:42,54:19,55:20,56:$Vb,57:$Vc,59:$Vd,60:$Ve,61:$Vf,65:$Vg,67:$Vh,74:38,75:$Vi,79:$Vj,87:27,96:$Vk,97:$Vl,98:$Vm,99:$Vn,100:$Vo,110:$Vp,111:39,112:$Vq,114:41,116:43,117:47,118:$Vr,119:$Vs,120:40},{7:326,8:251,9:70,11:$Vy,16:16,17:$V1,18:11,20:$V2,22:$V3,23:$V4,24:$V5,36:$V6,37:$V7,38:$V8,39:$V9,40:7,41:8,42:9,43:10,45:12,46:13,47:14,49:$Va,51:54,52:42,54:19,55:20,56:$Vb,57:$Vc,59:$Vd,60:$Ve,61:$Vf,65:$Vg,67:$Vh,74:38,75:$Vi,79:$Vj,87:27,96:$Vk,97:$Vl,98:$Vm,99:$Vn,100:$Vo,110:$Vp,111:39,112:$Vq,114:41,116:43,117:47,118:$Vr,119:$Vs,120:40},o($Vq1,[2,101]),o($V71,[2,102],{49:$Vz1,83:$VA1,88:$VB1}),o($V71,[2,105]),o($V71,[2,106]),o($VC1,[2,108],{110:$VA,112:$VB}),o([30,35,83,88],[2,109],{49:$Vz1}),o($VC1,[2,111]),o($V71,[2,56]),o($V71,[2,57]),o($VD1,[2,50]),{21:329,23:$VW},o($VD1,[2,53]),o($VD1,[2,54]),{11:[1,330]},{11:[2,36]},{11:[2,37]},{11:[2,38]},{12:[1,331]},o($Vv1,[2,30]),o($Vv1,[2,31]),o($Vw,[2,133]),{26:[1,332],30:[1,333]},o($Vv1,[2,93]),o($Vx,[2,71]),o($Vx,[2,73]),o($VG1,[2,76]),{49:[1,334]},o($VG1,[2,79]),o($Vx,[2,75]),{23:$V4,24:$V5,34:$Vr1,49:$Va,51:54,52:42,74:64,79:$Vj,84:335,87:217,100:$Vo,110:$Vp,111:39,112:$Vq,114:41,116:43,117:47,118:$Vr,119:$Vs,120:40},{23:$V4,24:$V5,34:$Vr1,49:$Va,51:54,52:42,74:64,79:$Vj,84:336,87:217,100:$Vo,110:$Vp,111:39,112:$Vq,114:41,116:43,117:47,118:$Vr,119:$Vs,120:40},{12:[1,337],30:$V81},{16:338,57:$Vc,61:$Vf,65:$Vg,67:$Vh},o($Vx,[2,23]),{7:339,8:251,9:70,11:$Vy,16:16,17:$V1,18:11,20:$V2,22:$V3,23:$V4,24:$V5,36:$V6,37:$V7,38:$V8,39:$V9,40:7,41:8,42:9,43:10,45:12,46:13,47:14,49:$Va,51:54,52:42,54:19,55:20,56:$Vb,57:$Vc,59:$Vd,60:$Ve,61:$Vf,65:$Vg,67:$Vh,74:38,75:$Vi,79:$Vj,87:27,96:$Vk,97:$Vl,98:$Vm,99:$Vn,100:$Vo,110:$Vp,111:39,112:$Vq,114:41,116:43,117:47,118:$Vr,119:$Vs,120:40},{23:$V4,52:106,55:340,74:140,120:40},{7:341,8:251,9:70,11:$Vy,16:16,17:$V1,18:11,20:$V2,22:$V3,23:$V4,24:$V5,36:$V6,37:$V7,38:$V8,39:$V9,40:7,41:8,42:9,43:10,45:12,46:13,47:14,49:$Va,51:54,52:42,54:19,55:20,56:$Vb,57:$Vc,59:$Vd,60:$Ve,61:$Vf,65:$Vg,67:$Vh,74:38,75:$Vi,79:$Vj,87:27,96:$Vk,97:$Vl,98:$Vm,99:$Vn,100:$Vo,110:$Vp,111:39,112:$Vq,114:41,116:43,117:47,118:$Vr,119:$Vs,120:40},o($V71,[2,103],{49:$Vz1,83:$VA1,88:$VB1}),o($V71,[2,104],{49:$Vz1,83:$VA1,88:$VB1}),o($VD1,[2,51]),{12:[1,342]},o($Vx,[2,70]),o($Vv1,[2,92]),o($VG1,[2,78]),o($Vx,[2,22])],
defaultActions: {55:[2,1],68:[2,2],312:[2,36],313:[2,37],314:[2,38]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }
        console.log(`STATE ${state} ${(this.terminals_[symbol] || symbol)}`);

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

const util = require('util');
// const Expression = require('./Expression.js');
function setLines(dst, first, last) {
    last = last || first;
    dst.first_line = first.first_line;
    dst.first_column = first.first_column;
    dst.last_line = last.last_line;
    dst.last_column = last.last_column;
}
function showcode(title, info) {
    console.log(title+` ${info.last_line}:${info.last_column}`);
}
//         console.log(`STATE ${state} ${(this.terminals_[symbol] || symbol)}`);
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: /* skip whitespace */ 
break;
case 1: /* console.log("MULTILINE COMMENT: "+yy_.yytext); */  
break;
case 2: /* console.log("SINGLE LINE COMMENT: "+yy_.yytext); */ 
break;
case 3: return 39; 
break;
case 4: return 90; 
break;
case 5: return 91; 
break;
case 6: return 97; 
break;
case 7: return 75; 
break;
case 8: return 64; 
break;
case 9: return 'IS'; 
break;
case 10: return 96; 
break;
case 11: return 'GLOBAL'; 
break;
case 12: return 36 
break;
case 13: return 37 
break;
case 14: return 38 
break;
case 15: return 'CHALLENGE' 
break;
case 16: return 61 
break;
case 17: return 57 
break;
case 18: return 56 
break;
case 19: return 60 
break;
case 20: return 59 
break;
case 21: return 67 
break;
case 22: return 'ELSEIF' 
break;
case 23: return 68 
break;
case 24: return 65 
break;
case 25: return 70 
break;
case 26: return 17 
break;
case 27: return 98 
break;
case 28: return 'AGGREGABLE' 
break;
case 29: return 78 
break;
case 30: return 22 
break;
case 31: return 27 
break;
case 32: return 'RETURN' 
break;
case 33: return 85 
break;
case 34: return 86 
break;
case 35: return 83 
break;
case 36: return 88 
break;
case 37: yy_.yytext = yy_.yytext.replace(/\_/g, ""); return 79; 
break;
case 38: yy_.yytext = yy_.yytext.slice(1,-1); return 80; 
break;
case 39: yy_.yytext = yy_.yytext.slice(1,-1); return 81; 
break;
case 40: return 23; 
break;
case 41: return 33; 
break;
case 42: yy_.yytext = yy_.yytext.slice(1); return 100; 
break;
case 43: yy_.yytext = yy_.yytext.slice(1); return 20; 
break;
case 44: return 115; 
break;
case 45: return 118; 
break;
case 46: return 119; 
break;
case 47: return 110; 
break;
case 48: return 112; 
break;
case 49: return 113; 
break;
case 50: return "'"; 
break;
case 51: return 15; 
break;
case 52: return 30; 
break;
case 53: return 122; 
break;
case 54: return 107; 
break;
case 55: return 108; 
break;
case 56: return 103; 
break;
case 57: return 104; 
break;
case 58: return 105; 
break;
case 59: return 106; 
break;
case 60: return 44; 
break;
case 61: return 102; 
break;
case 62: return 101; 
break;
case 63: return 72; 
break;
case 64: return 24; 
break;
case 65: return 26; 
break;
case 66: return 34; 
break;
case 67: return 35; 
break;
case 68: return 11; 
break;
case 69: return 12; 
break;
case 70: return 49; 
break;
case 71: return 109; 
break;
case 72: return 5; 
break;
case 73: console.log("INVALID: " + yy_.yytext); return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\*([^*]|[\r\n]|(\*+([^*/]|[\r\n])))*\*+\/)/,/^(?:\/\/.*)/,/^(?:col\b)/,/^(?:witness\b)/,/^(?:fixed\b)/,/^(?:namespace\b)/,/^(?:include\b)/,/^(?:in\b)/,/^(?:is\b)/,/^(?:public\b)/,/^(?:global\b)/,/^(?:integer\b)/,/^(?:fe\b)/,/^(?:expr\b)/,/^(?:challenge\b)/,/^(?:for\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:if\b)/,/^(?:elseif\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:when\b)/,/^(?:subproof\b)/,/^(?:aggregable\b)/,/^(?:stage\b)/,/^(?:function\b)/,/^(?:returns\b)/,/^(?:return\b)/,/^(?:\.\.\+\.\.)/,/^(?:\.\.\*\.\.)/,/^(?:\.\.\.)/,/^(?:\.\.)/,/^(?:(0x[0-9A-Fa-f][0-9A-Fa-f_]*)|([0-9][0-9_]*))/,/^(?:"[^"]+")/,/^(?:`[^`]+`)/,/^(?:[a-zA-Z_][a-zA-Z$_0-9]*)/,/^(?:&[a-zA-Z_][a-zA-Z$_0-9]*)/,/^(?:%[a-zA-Z_][a-zA-Z$_0-9]*)/,/^(?:@[a-zA-Z_][a-zA-Z$_0-9]*)/,/^(?:\*\*)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:')/,/^(?:;)/,/^(?:,)/,/^(?:\.)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:<)/,/^(?:>)/,/^(?:<=)/,/^(?:>=)/,/^(?:===)/,/^(?:!=)/,/^(?:==)/,/^(?:=)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?::)/,/^(?:!)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = pil_parser;
exports.Parser = pil_parser.Parser;
exports.parse = function () { return pil_parser.parse.apply(pil_parser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}