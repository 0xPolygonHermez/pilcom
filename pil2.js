/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var pil2 = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[2,16],$V1=[1,23],$V2=[1,21],$V3=[1,24],$V4=[1,47],$V5=[1,57],$V6=[1,42],$V7=[1,43],$V8=[1,44],$V9=[1,31],$Va=[1,8],$Vb=[1,9],$Vc=[1,10],$Vd=[1,54],$Ve=[1,28],$Vf=[1,39],$Vg=[1,29],$Vh=[1,30],$Vi=[1,38],$Vj=[1,40],$Vk=[1,41],$Vl=[1,35],$Vm=[1,36],$Vn=[1,32],$Vo=[1,33],$Vp=[1,37],$Vq=[1,56],$Vr=[1,51],$Vs=[1,52],$Vt=[1,55],$Vu=[5,11],$Vv=[1,62],$Vw=[5,11,17,20,22,23,24,36,37,38,39,41,42,43,55,61,62,64,65,66,68,70,76,83,86,87,88,89,100,102,108],$Vx=[5,11,15,62],$Vy=[5,11,15,17,20,22,23,24,36,37,38,39,41,42,43,55,61,62,64,65,66,68,70,71,73,76,83,86,87,88,89,100,102,108],$Vz=[1,74],$VA=[1,84],$VB=[1,85],$VC=[1,93],$VD=[1,94],$VE=[2,137],$VF=[1,98],$VG=[1,97],$VH=[1,99],$VI=[5,10,11,15,24,26,30,35,55,62,75,78,91,92,93,94,95,96,97,98,100,102,103,105,109],$VJ=[5,10,11,15,26,30,35,55,62,78,91,92,93,94,95,96,97,98,100,102],$VK=[1,104],$VL=[5,10,11,15,26,30,35,55,62,78,91,92,93,94,95,96,97,98,100,102,103],$VM=[1,105],$VN=[5,10,11,15,26,30,35,55,62,78,91,92,93,94,95,96,97,98,100,102,103,105],$VO=[1,111],$VP=[1,113],$VQ=[1,114],$VR=[1,117],$VS=[5,11,17,20,22,23,24,36,37,38,39,41,42,43,55,61,62,64,65,66,68,70,71,73,76,83,86,87,88,89,100,102,108],$VT=[1,125],$VU=[1,127],$VV=[5,11,15,30,62],$VW=[2,109],$VX=[1,129],$VY=[5,11,15,26,30,62],$VZ=[1,143],$V_=[1,142],$V$=[1,160],$V01=[1,162],$V11=[30,35],$V21=[1,166],$V31=[1,174],$V41=[1,175],$V51=[1,176],$V61=[1,177],$V71=[1,190],$V81=[1,191],$V91=[1,192],$Va1=[1,193],$Vb1=[1,194],$Vc1=[1,195],$Vd1=[1,196],$Ve1=[1,197],$Vf1=[1,206],$Vg1=[26,30],$Vh1=[11,15],$Vi1=[23,33],$Vj1=[15,26,97,98],$Vk1=[11,30],$Vl1=[1,262],$Vm1=[1,261],$Vn1=[11,71,73];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"all_statements":3,"statement_block":4,"EOF":5,"non_delimited_statement":6,"statement_closed":7,"lcs":8,"statement_no_closed":9,"{":10,"}":11,"delimited_statement":12,"statement_list":13,"statement_list_closed":14,"CS":15,"codeblock_closed":16,"WHEN":17,"expression":18,"when_body":19,"METADATA":20,"data_object":21,"FUNCTION":22,"IDENTIFIER":23,"(":24,"arguments":25,")":26,"RETURNS":27,"return_type":28,"arguments_list":29,",":30,"argument":31,"argument_type":32,"REFERENCE":33,"[":34,"]":35,"INTEGER":36,"FE":37,"EXPR":38,"COL":39,"codeblock_no_closed":40,"plookup":41,"permutation_identity":42,"connect_identity":43,"col_witness_declaration":44,"col_fixed_declaration":45,"col_declaration":46,"namespace_definition":47,"subproof_definition":48,"col_definition":49,"constraint":50,"include_directive":51,"public_declaration":52,"constant_definition":53,"data_array":54,":":55,"function_call":56,"pol_id":57,"expression_list":58,"variable_declaration":59,"variable_assignment":60,"DO":61,"WHILE":62,"conditional_expression":63,"CONTINUE":64,"BREAK":65,"FOR":66,"for_init":67,"SWITCH":68,"case_list":69,"IF":70,"ELSE":71,"case_item":72,"CASE":73,"variable_init":74,"=":75,"INCLUDE":76,"flexible_string":77,"EQ_CONS":78,"STRING":79,"TEMPLATE_STRING":80,"WITNESS":81,"name_list":82,"PUBLIC":83,"FIXED":84,"pol_name":85,"NAMESPACE":86,"SUBPROOF":87,"CONSTANT":88,"CONSTANTID":89,"e5":90,"EQ":91,"NE":92,"LT":93,"GT":94,"LE":95,"GE":96,"AND":97,"OR":98,"!":99,"+":100,"e4":101,"-":102,"*":103,"e3":104,"POW":105,"e2":106,"e1":107,"NUMBER":108,"'":109,".":110,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",10:"{",11:"}",15:"CS",17:"WHEN",20:"METADATA",22:"FUNCTION",23:"IDENTIFIER",24:"(",26:")",27:"RETURNS",30:",",33:"REFERENCE",34:"[",35:"]",36:"INTEGER",37:"FE",38:"EXPR",39:"COL",41:"plookup",42:"permutation_identity",43:"connect_identity",55:":",61:"DO",62:"WHILE",64:"CONTINUE",65:"BREAK",66:"FOR",68:"SWITCH",70:"IF",71:"ELSE",73:"CASE",75:"=",76:"INCLUDE",78:"EQ_CONS",79:"STRING",80:"TEMPLATE_STRING",81:"WITNESS",83:"PUBLIC",84:"FIXED",86:"NAMESPACE",87:"SUBPROOF",88:"CONSTANT",89:"CONSTANTID",91:"EQ",92:"NE",93:"LT",94:"GT",95:"LE",96:"GE",97:"AND",98:"OR",99:"!",100:"+",102:"-",103:"*",105:"POW",108:"NUMBER",109:"'",110:"."},
productions_: [0,[3,2],[6,1],[6,2],[6,2],[6,3],[12,1],[12,1],[13,1],[13,2],[13,1],[14,2],[14,3],[14,1],[14,2],[4,1],[4,0],[8,2],[8,1],[7,1],[7,5],[7,4],[7,7],[25,1],[25,0],[29,3],[29,1],[31,2],[31,2],[31,4],[31,4],[32,1],[32,1],[32,1],[32,1],[28,1],[28,1],[28,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,2],[9,4],[21,5],[21,7],[21,3],[21,5],[21,5],[54,3],[54,5],[54,5],[54,3],[54,3],[54,1],[19,3],[19,2],[19,1],[56,4],[40,1],[40,1],[40,1],[40,6],[40,1],[40,1],[16,9],[16,5],[16,7],[16,5],[16,7],[69,2],[69,1],[72,4],[72,2],[67,1],[67,1],[59,2],[59,2],[59,2],[74,1],[74,3],[74,1],[74,3],[60,3],[51,2],[49,4],[50,3],[77,1],[77,1],[58,3],[58,3],[58,1],[58,1],[44,3],[46,2],[52,7],[45,3],[82,3],[82,1],[85,1],[85,4],[47,4],[47,5],[48,5],[53,4],[18,1],[63,3],[63,3],[63,3],[63,3],[63,3],[63,3],[63,3],[63,3],[63,2],[63,3],[90,3],[90,3],[90,1],[101,3],[101,1],[104,3],[104,1],[106,2],[106,2],[106,1],[106,2],[106,1],[107,1],[107,1],[107,3],[107,1],[57,2],[57,3],[57,6],[57,3],[57,4],[57,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 2: case 6: case 7: case 8: case 10: case 13: case 15: case 19: case 23: case 26: case 31: case 32: case 33: case 34: case 35: case 36: case 37: case 38: case 39: case 40: case 41: case 42: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 64: case 67: case 69: case 70: case 71: case 73: case 74: case 81: case 84: case 85: case 89: case 91: case 97: case 98: case 101: case 102: case 108: case 109: case 115: case 128: case 130: case 132: case 135: case 137: case 138: case 139: case 141:
 this.$ = $$[$0] 
break;
case 3: case 4: case 9: case 11: case 14: case 27: case 28: case 52: case 66: case 80: case 83: case 86: case 87: case 88: case 94: case 104: case 124: case 133: case 134: case 136: case 142:
 this.$ = $$[$0-1] 
break;
case 5: case 12: case 25: case 56: case 59: case 62: case 63: case 65: case 90: case 92: case 93: case 96: case 99: case 100: case 103: case 106: case 107: case 116: case 117: case 118: case 119: case 120: case 121: case 122: case 123: case 125: case 126: case 127: case 129: case 131: case 140: case 143: case 145:
 this.$ = $$[$0-2] 
break;
case 20: case 54: case 57: case 60: case 61: case 76: case 78: case 112: case 113:
 this.$ = $$[$0-4] 
break;
case 21: case 29: case 53: case 68: case 82: case 95: case 110: case 111: case 114: case 146:
 this.$ = $$[$0-3] 
break;
case 22: case 55: case 77: case 79: case 105:
 this.$ = $$[$0-6] 
break;
case 72: case 144:
 this.$ = $$[$0-5] 
break;
case 75:
 this.$ = $$[$0-8] 
break;
}
},
table: [{3:1,4:2,5:$V0,7:6,9:5,13:3,14:4,16:22,17:$V1,18:34,20:$V2,22:$V3,23:$V4,24:$V5,36:$V6,37:$V7,38:$V8,39:$V9,40:7,41:$Va,42:$Vb,43:$Vc,44:11,45:12,46:13,47:14,48:15,49:16,50:17,51:18,52:19,53:20,55:$Vd,56:27,57:45,59:25,60:26,61:$Ve,62:$Vf,64:$Vg,65:$Vh,66:$Vi,68:$Vj,70:$Vk,76:$Vl,83:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:46,100:$Vr,101:48,102:$Vs,104:49,106:50,107:53,108:$Vt},{1:[3]},{5:[1,58]},o($Vu,[2,15]),o($Vu,[2,8],{40:7,44:11,45:12,46:13,47:14,48:15,49:16,50:17,51:18,52:19,53:20,16:22,59:25,60:26,56:27,18:34,57:45,90:46,101:48,104:49,106:50,107:53,9:59,7:60,17:$V1,20:$V2,22:$V3,23:$V4,24:$V5,36:$V6,37:$V7,38:$V8,39:$V9,41:$Va,42:$Vb,43:$Vc,55:$Vd,61:$Ve,62:$Vf,64:$Vg,65:$Vh,66:$Vi,68:$Vj,70:$Vk,76:$Vl,83:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,100:$Vr,102:$Vs,108:$Vt}),o($Vu,[2,10],{8:61,15:$Vv}),o($Vw,[2,13]),o($Vx,[2,38]),o($Vx,[2,39]),o($Vx,[2,40]),o($Vx,[2,41]),o($Vx,[2,42]),o($Vx,[2,43]),o($Vx,[2,44]),o($Vx,[2,45]),o($Vx,[2,46]),o($Vx,[2,47]),o($Vx,[2,48]),o($Vx,[2,49]),o($Vx,[2,50]),o($Vx,[2,51]),{10:[1,65],18:63,23:$V4,24:$V5,34:[1,64],55:$Vd,56:67,57:66,89:$Vq,90:46,100:$Vr,101:48,102:$Vs,104:49,106:50,107:53,108:$Vt},o($Vy,[2,19]),{18:68,23:$V4,24:$V5,55:$Vd,56:67,57:66,89:$Vq,90:46,100:$Vr,101:48,102:$Vs,104:49,106:50,107:53,108:$Vt},{23:[1,69]},o($Vx,[2,69]),o($Vx,[2,70]),o([5,11,15,62,78,100,102,103,105],[2,71]),{6:71,7:73,9:72,10:$Vz,12:70,16:22,17:$V1,18:34,20:$V2,22:$V3,23:$V4,24:$V5,36:$V6,37:$V7,38:$V8,39:$V9,40:7,41:$Va,42:$Vb,43:$Vc,44:11,45:12,46:13,47:14,48:15,49:16,50:17,51:18,52:19,53:20,55:$Vd,56:27,57:45,59:25,60:26,61:$Ve,62:$Vf,64:$Vg,65:$Vh,66:$Vi,68:$Vj,70:$Vk,76:$Vl,83:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:46,100:$Vr,101:48,102:$Vs,104:49,106:50,107:53,108:$Vt},o($Vx,[2,73]),o($Vx,[2,74]),{23:[1,78],81:[1,75],82:77,84:[1,76],85:79},{23:[1,80]},{23:[1,81]},{78:[1,82]},{77:83,79:$VA,80:$VB},{23:[1,86]},{89:[1,87]},{24:[1,88]},{24:[1,89]},{24:[1,90]},{24:[1,91]},{23:$VC,33:$VD,74:92},{23:$VC,33:$VD,74:95},{23:$VC,33:$VD,74:96},o([78,100,102,103,105],$VE,{24:$VF,75:$VG,109:$VH}),o([5,10,11,15,26,30,35,55,62,78,91,92,93,94,95,96,97,98],[2,115],{100:[1,100],102:[1,101]}),o($VI,[2,147],{34:[1,103],110:[1,102]}),o($VJ,[2,128],{103:$VK}),o($VL,[2,130],{105:$VM}),o($VN,[2,132]),{23:$V4,24:$V5,55:$Vd,56:67,57:66,89:$Vq,100:$Vr,102:$Vs,106:106,107:53,108:$Vt},{23:$V4,24:$V5,55:$Vd,56:67,57:66,89:$Vq,100:$Vr,102:$Vs,106:107,107:53,108:$Vt},o($VN,[2,135]),{23:[1,108]},o($VI,[2,138]),o($VI,[2,139]),{18:109,23:$V4,24:$V5,55:$Vd,56:67,57:66,89:$Vq,90:46,100:$Vr,101:48,102:$Vs,104:49,106:50,107:53,108:$Vt},{1:[2,1]},o($Vu,[2,9],{8:110,15:$Vv}),o($Vw,[2,11]),o($Vw,[2,14],{15:$VO}),o($Vy,[2,18]),o($Vx,[2,52]),{10:$VP,18:115,23:$V4,24:$V5,34:$VQ,54:112,55:$Vd,56:67,57:66,89:$Vq,90:46,100:$Vr,101:48,102:$Vs,104:49,106:50,107:53,108:$Vt},{21:116,23:$VR},o($VN,$VE,{24:$VF,109:$VH}),o($VI,[2,141]),{10:[1,118]},{24:[1,119]},{62:[1,120]},{62:[2,6]},{8:121,15:$Vv,62:[2,7]},o($VS,[2,2],{8:122,15:$Vv}),{4:123,7:6,9:5,11:$V0,13:3,14:4,16:22,17:$V1,18:34,20:$V2,22:$V3,23:$V4,24:$V5,36:$V6,37:$V7,38:$V8,39:$V9,40:7,41:$Va,42:$Vb,43:$Vc,44:11,45:12,46:13,47:14,48:15,49:16,50:17,51:18,52:19,53:20,55:$Vd,56:27,57:45,59:25,60:26,61:$Ve,62:$Vf,64:$Vg,65:$Vh,66:$Vi,68:$Vj,70:$Vk,76:$Vl,83:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:46,100:$Vr,101:48,102:$Vs,104:49,106:50,107:53,108:$Vt},{23:$VT,82:124,85:79},{23:$VT,82:126,85:79},o($Vx,[2,104],{30:$VU}),o($VV,$VW,{34:$VX,75:[1,128]}),o($VV,[2,108]),{24:[1,131],87:[1,130]},{24:[1,132]},{18:133,23:$V4,24:$V5,55:$Vd,56:67,57:66,89:$Vq,90:46,100:$Vr,101:48,102:$Vs,104:49,106:50,107:53,108:$Vt},o($Vx,[2,94]),o($VY,[2,97]),o($VY,[2,98]),{75:[1,134]},{75:[1,135]},{23:$V4,36:$V6,37:$V7,38:$V8,57:139,59:137,60:138,67:136},{18:141,23:$V4,24:$VZ,55:$Vd,56:67,57:66,63:140,89:$Vq,90:46,99:$V_,100:$Vr,101:48,102:$Vs,104:49,106:50,107:53,108:$Vt},{18:144,23:$V4,24:$V5,55:$Vd,56:67,57:66,89:$Vq,90:46,100:$Vr,101:48,102:$Vs,104:49,106:50,107:53,108:$Vt},{18:141,23:$V4,24:$VZ,55:$Vd,56:67,57:66,63:145,89:$Vq,90:46,99:$V_,100:$Vr,101:48,102:$Vs,104:49,106:50,107:53,108:$Vt},o($Vx,[2,86]),o($Vx,[2,89],{75:[1,146]}),o($Vx,[2,91],{75:[1,147]}),o($Vx,[2,87]),o($Vx,[2,88]),{18:148,23:$V4,24:$V5,55:$Vd,56:67,57:66,89:$Vq,90:46,100:$Vr,101:48,102:$Vs,104:49,106:50,107:53,108:$Vt},{18:150,23:$V4,24:$V5,55:$Vd,56:67,57:66,58:149,77:151,79:$VA,80:$VB,89:$Vq,90:46,100:$Vr,101:48,102:$Vs,104:49,106:50,107:53,108:$Vt},o([5,10,11,15,26,30,35,55,62,75,78,91,92,93,94,95,96,97,98,100,102,103,105,109],[2,142],{56:67,107:152,57:153,23:$V4,24:$V5,89:$Vq,108:$Vt}),{23:$V4,24:$V5,55:$Vd,56:67,57:66,89:$Vq,100:$Vr,101:154,102:$Vs,104:49,106:50,107:53,108:$Vt},{23:$V4,24:$V5,55:$Vd,56:67,57:66,89:$Vq,100:$Vr,101:155,102:$Vs,104:49,106:50,107:53,108:$Vt},{23:[1,156]},{18:157,23:$V4,24:$V5,55:$Vd,56:67,57:66,89:$Vq,90:46,100:$Vr,101:48,102:$Vs,104:49,106:50,107:53,108:$Vt},{23:$V4,24:$V5,55:$Vd,56:67,57:66,89:$Vq,100:$Vr,102:$Vs,104:158,106:50,107:53,108:$Vt},{23:$V4,24:$V5,55:$Vd,56:67,57:66,89:$Vq,100:$Vr,102:$Vs,106:159,107:53,108:$Vt},o($VN,[2,133]),o($VN,[2,134]),o($VN,[2,136]),{26:$V$},o($Vw,[2,12],{15:$VO}),o($Vy,[2,17]),{30:$V01,35:[1,161]},{21:163,23:$VR},{10:$VP,18:115,23:$V4,24:$V5,34:$VQ,54:164,55:$Vd,56:67,57:66,89:$Vq,90:46,100:$Vr,101:48,102:$Vs,104:49,106:50,107:53,108:$Vt},o($V11,[2,64]),{11:[1,165],30:$V21},{55:[1,167]},{18:34,19:168,23:$V4,24:$V5,50:169,55:$Vd,56:67,57:66,89:$Vq,90:46,100:$Vr,101:48,102:$Vs,104:49,106:50,107:53,108:$Vt},{25:170,26:[2,24],29:171,31:172,32:173,36:$V31,37:$V41,38:$V51,39:$V61},{24:[1,178]},o($VS,[2,4],{15:$VO}),o($VS,[2,3],{15:$VO}),{11:[1,179]},o($Vx,[2,103],{30:$VU}),o($VV,$VW,{34:$VX}),o($Vx,[2,106],{30:$VU}),{23:$VT,85:180},{18:181,23:$V4,24:$V5,55:$Vd,56:67,57:66,89:$Vq,90:46,100:$Vr,101:48,102:$Vs,104:49,106:50,107:53,108:$Vt},{18:182,23:$V4,24:$V5,55:$Vd,56:67,57:66,89:$Vq,90:46,100:$Vr,101:48,102:$Vs,104:49,106:50,107:53,108:$Vt},{23:[1,183]},{18:184,23:$V4,24:$V5,55:$Vd,56:67,57:66,89:$Vq,90:46,100:$Vr,101:48,102:$Vs,104:49,106:50,107:53,108:$Vt},{18:150,23:$V4,24:$V5,55:$Vd,56:67,57:66,58:185,77:151,79:$VA,80:$VB,89:$Vq,90:46,100:$Vr,101:48,102:$Vs,104:49,106:50,107:53,108:$Vt},o($Vx,[2,96]),{23:$V4,57:186},{18:187,23:$V4,24:$V5,55:$Vd,56:67,57:66,89:$Vq,90:46,100:$Vr,101:48,102:$Vs,104:49,106:50,107:53,108:$Vt},{15:[1,188]},{15:[2,84]},{15:[2,85]},{75:$VG,109:$VH},{26:[1,189],97:$V71,98:$V81},{91:$V91,92:$Va1,93:$Vb1,94:$Vc1,95:$Vd1,96:$Ve1},{18:141,23:$V4,24:$VZ,55:$Vd,56:67,57:66,63:198,89:$Vq,90:46,99:$V_,100:$Vr,101:48,102:$Vs,104:49,106:50,107:53,108:$Vt},{18:200,23:$V4,24:$VZ,55:$Vd,56:67,57:66,63:199,89:$Vq,90:46,99:$V_,100:$Vr,101:48,102:$Vs,104:49,106:50,107:53,108:$Vt},{26:[1,201]},{26:[1,202],97:$V71,98:$V81},{18:203,23:$V4,24:$V5,55:$Vd,56:67,57:66,89:$Vq,90:46,100:$Vr,101:48,102:$Vs,104:49,106:50,107:53,108:$Vt},{18:204,23:$V4,24:$V5,55:$Vd,56:67,57:66,89:$Vq,90:46,100:$Vr,101:48,102:$Vs,104:49,106:50,107:53,108:$Vt},o($Vx,[2,93]),{26:[1,205],30:$Vf1},o($Vg1,[2,101]),o($Vg1,[2,102]),o($VI,[2,143]),{24:$VF,109:$VH},o($VJ,[2,126],{103:$VK}),o($VJ,[2,127],{103:$VK}),o($VI,[2,145],{34:[1,207]}),{35:[1,208]},o($VL,[2,129],{105:$VM}),o($VN,[2,131]),o($VI,[2,140]),o($Vx,[2,53]),{10:[1,210],18:209,23:$V4,24:$V5,34:[1,211],55:$Vd,56:67,57:66,89:$Vq,90:46,100:$Vr,101:48,102:$Vs,104:49,106:50,107:53,108:$Vt},{11:[1,212],30:$V21},{30:$V01,35:[1,213]},o($Vy,[2,21]),{23:[1,214]},{10:[1,216],18:215,23:$V4,24:$V5,34:[1,217],55:$Vd,56:67,57:66,89:$Vq,90:46,100:$Vr,101:48,102:$Vs,104:49,106:50,107:53,108:$Vt},{11:[1,218],15:[1,219]},o($Vh1,[2,67]),{26:[1,220]},{26:[2,23],30:[1,221]},o($Vg1,[2,26]),{23:[1,222],33:[1,223]},o($Vi1,[2,31]),o($Vi1,[2,32]),o($Vi1,[2,33]),o($Vi1,[2,34]),{18:141,23:$V4,24:$VZ,55:$Vd,56:67,57:66,63:224,89:$Vq,90:46,99:$V_,100:$Vr,101:48,102:$Vs,104:49,106:50,107:53,108:$Vt},o($Vy,[2,5]),o($VV,[2,107]),o($Vx,[2,95]),{35:[1,225]},o($Vx,[2,111]),{26:[1,226]},{26:[1,227],30:$Vf1},{24:[1,228],109:$VH},o($Vx,[2,114]),{18:141,23:$V4,24:$VZ,55:$Vd,56:67,57:66,63:229,89:$Vq,90:46,99:$V_,100:$Vr,101:48,102:$Vs,104:49,106:50,107:53,108:$Vt},{6:230,7:73,9:231,10:$Vz,16:22,17:$V1,18:34,20:$V2,22:$V3,23:$V4,24:$V5,36:$V6,37:$V7,38:$V8,39:$V9,40:7,41:$Va,42:$Vb,43:$Vc,44:11,45:12,46:13,47:14,48:15,49:16,50:17,51:18,52:19,53:20,55:$Vd,56:27,57:45,59:25,60:26,61:$Ve,62:$Vf,64:$Vg,65:$Vh,66:$Vi,68:$Vj,70:$Vk,76:$Vl,83:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:46,100:$Vr,101:48,102:$Vs,104:49,106:50,107:53,108:$Vt},{18:141,23:$V4,24:$VZ,55:$Vd,56:67,57:66,63:232,89:$Vq,90:46,99:$V_,100:$Vr,101:48,102:$Vs,104:49,106:50,107:53,108:$Vt},{18:141,23:$V4,24:$VZ,55:$Vd,56:67,57:66,63:233,89:$Vq,90:46,99:$V_,100:$Vr,101:48,102:$Vs,104:49,106:50,107:53,108:$Vt},{18:234,23:$V4,24:$V5,55:$Vd,56:67,57:66,89:$Vq,90:46,100:$Vr,101:48,102:$Vs,104:49,106:50,107:53,108:$Vt},{18:235,23:$V4,24:$V5,55:$Vd,56:67,57:66,89:$Vq,90:46,100:$Vr,101:48,102:$Vs,104:49,106:50,107:53,108:$Vt},{18:236,23:$V4,24:$V5,55:$Vd,56:67,57:66,89:$Vq,90:46,100:$Vr,101:48,102:$Vs,104:49,106:50,107:53,108:$Vt},{18:237,23:$V4,24:$V5,55:$Vd,56:67,57:66,89:$Vq,90:46,100:$Vr,101:48,102:$Vs,104:49,106:50,107:53,108:$Vt},{18:238,23:$V4,24:$V5,55:$Vd,56:67,57:66,89:$Vq,90:46,100:$Vr,101:48,102:$Vs,104:49,106:50,107:53,108:$Vt},{18:239,23:$V4,24:$V5,55:$Vd,56:67,57:66,89:$Vq,90:46,100:$Vr,101:48,102:$Vs,104:49,106:50,107:53,108:$Vt},o($Vj1,[2,124]),{26:[1,240],97:$V71,98:$V81},{26:$V$,91:$V91,92:$Va1,93:$Vb1,94:$Vc1,95:$Vd1,96:$Ve1},{10:[1,241]},{6:242,7:73,9:231,10:$Vz,16:22,17:$V1,18:34,20:$V2,22:$V3,23:$V4,24:$V5,36:$V6,37:$V7,38:$V8,39:$V9,40:7,41:$Va,42:$Vb,43:$Vc,44:11,45:12,46:13,47:14,48:15,49:16,50:17,51:18,52:19,53:20,55:$Vd,56:27,57:45,59:25,60:26,61:$Ve,62:$Vf,64:$Vg,65:$Vh,66:$Vi,68:$Vj,70:$Vk,76:$Vl,83:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:46,100:$Vr,101:48,102:$Vs,104:49,106:50,107:53,108:$Vt},o($Vx,[2,90]),o($Vx,[2,92]),o($VI,[2,68]),{18:243,23:$V4,24:$V5,55:$Vd,56:67,57:66,77:244,79:$VA,80:$VB,89:$Vq,90:46,100:$Vr,101:48,102:$Vs,104:49,106:50,107:53,108:$Vt},{18:245,23:$V4,24:$V5,55:$Vd,56:67,57:66,89:$Vq,90:46,100:$Vr,101:48,102:$Vs,104:49,106:50,107:53,108:$Vt},o($VI,[2,146]),o($V11,[2,59]),{21:246,23:$VR},{10:$VP,18:115,23:$V4,24:$V5,34:$VQ,54:247,55:$Vd,56:67,57:66,89:$Vq,90:46,100:$Vr,101:48,102:$Vs,104:49,106:50,107:53,108:$Vt},o($V11,[2,62]),o($V11,[2,63]),{55:[1,248]},o($Vk1,[2,56]),{21:249,23:$VR},{10:$VP,18:115,23:$V4,24:$V5,34:$VQ,54:250,55:$Vd,56:67,57:66,89:$Vq,90:46,100:$Vr,101:48,102:$Vs,104:49,106:50,107:53,108:$Vt},o($Vy,[2,20]),o($Vh1,[2,66],{18:34,90:46,101:48,104:49,106:50,107:53,57:66,56:67,50:251,23:$V4,24:$V5,55:$Vd,89:$Vq,100:$Vr,102:$Vs,108:$Vt}),{27:[1,252]},{31:253,32:173,36:$V31,37:$V41,38:$V51,39:$V61},o($Vg1,[2,27],{34:[1,254]}),o($Vg1,[2,28],{34:[1,255]}),{26:[1,256],97:$V71,98:$V81},o($VV,[2,110]),o($Vx,[2,112]),o($Vx,[2,113]),{18:257,23:$V4,24:$V5,55:$Vd,56:67,57:66,89:$Vq,90:46,100:$Vr,101:48,102:$Vs,104:49,106:50,107:53,108:$Vt},{15:[1,258],97:$V71,98:$V81},o($Vy,[2,76]),{8:121,15:$Vv},o($Vj1,[2,122]),o([15,26,98],[2,123],{97:$V71}),o($Vj1,[2,116]),o($Vj1,[2,117]),o($Vj1,[2,118]),o($Vj1,[2,119]),o($Vj1,[2,120]),o($Vj1,[2,121]),o($Vj1,[2,125]),{69:259,71:$Vl1,72:260,73:$Vm1},o([5,11,15,17,20,22,23,24,36,37,38,39,41,42,43,55,61,62,64,65,66,68,70,73,76,83,86,87,88,89,100,102,108],[2,78],{71:[1,263]}),o($Vg1,[2,99]),o($Vg1,[2,100]),{35:[1,264]},{11:[1,265],30:$V21},{30:$V01,35:[1,266]},{10:[1,268],18:267,23:$V4,24:$V5,55:$Vd,56:67,57:66,89:$Vq,90:46,100:$Vr,101:48,102:$Vs,104:49,106:50,107:53,108:$Vt},{11:[1,269],30:$V21},{30:$V01,35:[1,270]},o($Vh1,[2,65]),{28:271,36:[1,272],37:[1,273],38:[1,274]},o($Vg1,[2,25]),{35:[1,275]},{35:[1,276]},o($Vx,[2,72]),{26:[1,277]},{18:150,23:$V4,24:$V5,55:$Vd,56:67,57:66,58:278,77:151,79:$VA,80:$VB,89:$Vq,90:46,100:$Vr,101:48,102:$Vs,104:49,106:50,107:53,108:$Vt},{11:[1,279],71:$Vl1,72:280,73:$Vm1},o($Vn1,[2,81]),{18:281,23:$V4,24:$V5,55:$Vd,56:67,57:66,89:$Vq,90:46,100:$Vr,101:48,102:$Vs,104:49,106:50,107:53,108:$Vt},{6:282,7:73,9:231,10:$Vz,16:22,17:$V1,18:34,20:$V2,22:$V3,23:$V4,24:$V5,36:$V6,37:$V7,38:$V8,39:$V9,40:7,41:$Va,42:$Vb,43:$Vc,44:11,45:12,46:13,47:14,48:15,49:16,50:17,51:18,52:19,53:20,55:$Vd,56:27,57:45,59:25,60:26,61:$Ve,62:$Vf,64:$Vg,65:$Vh,66:$Vi,68:$Vj,70:$Vk,76:$Vl,83:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:46,100:$Vr,101:48,102:$Vs,104:49,106:50,107:53,108:$Vt},{6:283,7:73,9:231,10:$Vz,16:22,17:$V1,18:34,20:$V2,22:$V3,23:$V4,24:$V5,36:$V6,37:$V7,38:$V8,39:$V9,40:7,41:$Va,42:$Vb,43:$Vc,44:11,45:12,46:13,47:14,48:15,49:16,50:17,51:18,52:19,53:20,55:$Vd,56:27,57:45,59:25,60:26,61:$Ve,62:$Vf,64:$Vg,65:$Vh,66:$Vi,68:$Vj,70:$Vk,76:$Vl,83:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:46,100:$Vr,101:48,102:$Vs,104:49,106:50,107:53,108:$Vt},o($VI,[2,144]),o($V11,[2,60]),o($V11,[2,61]),o($Vk1,[2,54]),{21:284,23:$VR},o($Vk1,[2,57]),o($Vk1,[2,58]),o($Vy,[2,22]),o($Vy,[2,35]),o($Vy,[2,36]),o($Vy,[2,37]),o($Vg1,[2,29]),o($Vg1,[2,30]),o($Vx,[2,105]),{26:[1,285],30:$Vf1},o($Vy,[2,77]),o($Vn1,[2,80]),{55:[1,286]},o($Vn1,[2,83]),o($Vy,[2,79]),{11:[1,287],30:$V21},{6:288,7:73,9:231,10:$Vz,16:22,17:$V1,18:34,20:$V2,22:$V3,23:$V4,24:$V5,36:$V6,37:$V7,38:$V8,39:$V9,40:7,41:$Va,42:$Vb,43:$Vc,44:11,45:12,46:13,47:14,48:15,49:16,50:17,51:18,52:19,53:20,55:$Vd,56:27,57:45,59:25,60:26,61:$Ve,62:$Vf,64:$Vg,65:$Vh,66:$Vi,68:$Vj,70:$Vk,76:$Vl,83:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:46,100:$Vr,101:48,102:$Vs,104:49,106:50,107:53,108:$Vt},{6:289,7:73,9:231,10:$Vz,16:22,17:$V1,18:34,20:$V2,22:$V3,23:$V4,24:$V5,36:$V6,37:$V7,38:$V8,39:$V9,40:7,41:$Va,42:$Vb,43:$Vc,44:11,45:12,46:13,47:14,48:15,49:16,50:17,51:18,52:19,53:20,55:$Vd,56:27,57:45,59:25,60:26,61:$Ve,62:$Vf,64:$Vg,65:$Vh,66:$Vi,68:$Vj,70:$Vk,76:$Vl,83:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:46,100:$Vr,101:48,102:$Vs,104:49,106:50,107:53,108:$Vt},o($Vk1,[2,55]),o($Vy,[2,75]),o($Vn1,[2,82])],
defaultActions: {58:[2,1],71:[2,6],137:[2,84],138:[2,85]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }
        console.log(`STATE ${state} ${(this.terminals_[symbol] || symbol)}`);

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = pil2;
exports.Parser = pil2.Parser;
exports.parse = function () { return pil2.parse.apply(pil2, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}