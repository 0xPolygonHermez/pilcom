package pilout;
syntax = "proto3";


message PilOut {
    ProofType proofType = 1;
    oneof proof {
        SubProof monolithicProof = 2;
        VADCOP vadcop = 3;
    }
    repeated Challenge challenges = 4;
    repeated Reference references = 5;
}

enum ProofType {
    MONOLITIC = 0;
    VADCOP = 1;
}

message VADCOP {
//    repeated GlobalPublic globalPublics = 21;
    int32 nGlobalPublics = 1;
    repeated GlobalConstraint globalConstraints = 2;
    repeated SubProof subProofs = 3;
    repeated GlobalExpression globalExpressions = 4;
}

// Main::oldStateRoot === Keccak::stateRoot * Arith::stateRoot + alfa;

message GlobalConstraint {
    GlobalOperand globalOperand = 2;
    optional string debugLine = 3;
}


message GlobalOperand {
    message Challenge {
        int32 id = 1;
    }

    message SubproofPublicId {
        int32 subproofId = 1;
        int32 id  = 2;
    }

    message SubproofPublic {
        repeated SubproofPublicId subProofPublicIds = 1;
    }

    message GlobalPublic {
        int32 id = 1;
    }

    message GlobalExpression {
        int32 id = 1;
    }

    message Constant {
        bytes value = 1;
    }

    oneof operand {
        Challenge challenge = 3;
        GlobalPublic globalPublic = 4;
        SubproofPublic public = 5;
        GlobalExpression globalExpression = 6;
        Constant constant = 7;
    }
}


message GlobalExpression {
    enum Operation {
        SUM = 0;
        SUB = 1;
        MUL = 2;
        NEG = 3;
    }
    Operation operation = 1;
    repeated GlobalOperand globalOperands = 2;
}


message SubProof {
    optional string name = 2;
    optional int32 rowLength = 3;
    repeated Expression expressions = 4;
    repeated Constraint constraints = 5;
    repeated Public publics = 7;
    repeated FixedCol fixedCols = 8;
    // int32 nFixedCols = 8;
    repeated PeriodicCol periodicCols = 8;
    repeated WitnessCol witnessCols = 9;
}

enum ReferenceType {
    IM_COL = 0;
    FIXED_COL = 1;
    PERIODIC_COL = 2;
    WITNESS_COL = 3;
    PUBLIC = 4;
    CHALLENGE = 5;
    GLOBAL_PUBLIC = 6;
}

enum ConstraintDomain {
    FIRST = 0;
    LAST = 1;
    TRANSITION = 2;
    ALL = 3;
}


message Challenge {
    int32 stage = 3;
}

message Public {
    Operand readFrom = 2;
    int32 row = 3;
}

message Constraint {
    ConstraintDomain constraintDomain = 2;
    optional int32 frameSize = 3;   // Only if transition domain
    Operand operand = 4;
    optional string debugLine = 5;
}


message Reference {
    string name = 1;
    optional int32 subProofId = 2;
    ReferenceType type = 3;
    int32 id = 4;
    int32 dim = 5;
    repeated int32 lenghts = 6;
    optional string debugLine = 7;
}

message Operand {
    message WitnessCol {
        int32 id = 1;
        sint32 next = 2;
    }

    message FixedCol {
        int32 id = 1;
        sint32 next = 2;
    }

    message PeriodicCol {
        int32 id = 1;
        sint32 next = 2;
    }

    message Challenge {
        int32 id = 1;
    }

    message GlobalPublic {
        int32 id = 1;
    }

    message Public {
        int32 id = 1;
    }

    message Expression {
        int32 id = 1;
    }

    message Constant {
        bytes value = 1;
    }

    oneof operand {
        FixedCol fixedCol = 1;
        PeriodicCol periodicCol = 2;
        WitnessCol witnessCol = 3;
        Challenge challenge = 4;
        GlobalPublic globalPublic = 5;
        Public public = 6;
        Expression expression = 7;
        Constant constant = 8;
    }
}

message Expression {
    enum Operation {
        SUM = 0;
        SUB = 1;
        MUL = 2;
        NEG = 3;
    }
    Operation operation = 1;
    repeated Operand operands = 2;
}


message WitnessCol {
    int32 stage = 1;
}

message FixedCol {
    repeated bytes values = 1;
}

message PeriodicCol {
    repeated bytes values = 1;    // Only the cycle
}

enum FrontEndFieldType {
    STRING = 0;
    OPERAND = 1;
    ARRAY = 2;
}

message FrontEndField {
    FrontEndFieldType frontEndFieldType = 1;
    optional string name = 2;
    oneof value {
        string stringValue = 3;
        Operand operand = 4;
        FrontEndFieldArray frontEndFields = 5;
    }
}

message FrontEndFieldArray {
    repeated FrontEndField frontEndFields = 1;
}

message FronEndData {
    string name = 1;
    repeated FrontEndField FrontEndFields = 2;
    optional int32 subProofId = 3;
}
