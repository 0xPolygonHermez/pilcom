syntax = "proto3";
package pilout;

message PilOut {
    optional string name = 1;
    bytes baseField = 2;                        // base field characteristic
    repeated Subproof subproofs = 3;
    repeated uint32 numChallenges = 4;          // number of challenges per stage
    uint32 numProofValues = 5;
    uint32 numPublicValues = 6;
    repeated PublicTable publicTables = 7;
    repeated GlobalExpression expressions = 8;
    repeated GlobalConstraint constraints = 9;  // Constraints that apply only to signals
    repeated Hint hints = 10;
    repeated Symbol symbols = 11;
}

message Subproof {
    optional string name = 1;
    bool aggregable = 2;
    repeated SubproofValue subproofvalues = 3;
    repeated BasicAir airs = 4;
}

message SubproofValue {
    AggregationType aggType = 1;
}

enum AggregationType {
    SUM = 0;
    PROD = 1;
}

message PublicTable {
    uint32 numCols = 1;
    uint32 maxRows = 2;
    AggregationType aggType = 3;
    GlobalOperand.Expression rowExpressionIdx = 4;
}

message GlobalConstraint {
    GlobalOperand.Expression expressionIdx = 1;
    optional string debugLine = 2;
}

message GlobalExpression {
    message Add {
        GlobalOperand lhs = 1;
        GlobalOperand rhs = 2;
    }

    message Sub {
        GlobalOperand lhs = 1;
        GlobalOperand rhs = 2;
    }

    message Mul {
        GlobalOperand lhs = 1;
        GlobalOperand rhs = 2;
    }

    message Neg {
        GlobalOperand value = 1;
    }

    oneof operation {
        Add add = 1;
        Sub sub = 2;
        Mul mul = 3;
        Neg neg = 4;
    }
}

message GlobalOperand {
    message Constant {
        bytes value = 1;    // basefield element, variable length
    }

    message Challenge {
        uint32 stage = 1;
        uint32 idx = 2;         // index relative to the stage
    }

    message ProofValue {
        uint32 idx = 1;
    }

    message SubproofValue {
        uint32 subproofId = 1;
        uint32 idx = 2;
    }

    message PublicValue {
        uint32 idx = 1;
    }

    message PublicTableAggregatedValue {
        uint32 idx = 1;
    }

    message PublicTableColumn {
        uint32 idx = 1;         // public table index
        uint32 colIdx = 2;      // column index within the table
    }

    message Expression {
        uint32 idx = 1;
    }

    oneof operand {
        Constant constant = 1;
        Challenge challenge = 2;
        ProofValue proofValue = 3;
        SubproofValue subproofValue = 4;
        PublicValue publicValue = 5;
        PublicTableAggregatedValue publicTableAggregatedValue = 6;
        PublicTableColumn publicTableColumn = 7;
        Expression expression = 8;
    }
}

// ================ BasicAir ================

message BasicAir {
    optional string name = 1;
    optional uint32 numRows = 2;            // log2(n), where n is the number of rows
    repeated PeriodicCol periodicCols = 3;
    repeated FixedCol fixedCols = 4;
    repeated uint32 stageWidths = 5;        // stage widths excluding stage 0 (fixed columns)
    repeated Expression expressions = 6;
    repeated Constraint constraints = 7;
}

message PeriodicCol {
    repeated bytes values = 1;   // BaseFieldElement, only the cycle
}

message FixedCol {
    repeated bytes values = 1; // BaseFieldElement
}

message Constraint {
    message FirstRow {
        Operand.Expression expressionIdx = 1;
        optional string debugLine = 2;
    }

    message LastRow {
        Operand.Expression expressionIdx = 1;
        optional string debugLine = 2;
    }

    message EveryRow {
        Operand.Expression expressionIdx = 1;
        optional string debugLine = 2;
    }

    message EveryFrame {
        Operand.Expression expressionIdx = 1;
        uint32 offsetMin = 2;               // offsetMin = 0 means that current row is at index 0
        uint32 offsetMax = 3;               // frame size is defined as offsetMax - offsetMin + 1
        optional string debugLine = 4;
    }

    oneof constraint {
        FirstRow firstRow = 1;
        LastRow lastRow = 2;
        EveryRow everyRow = 3;
        EveryFrame everyFrame = 4;
    }
}

message Operand {
    message Constant {
        bytes value = 1; // BaseFieldElement
    }

    message Challenge {
        uint32 stage = 1;
        uint32 idx = 2;     // index relative to the stage
    }

    message ProofValue {
        uint32 idx = 1;
    }

    message SubproofValue {
        uint32 idx = 1;
    }

    message PublicValue {
        uint32 idx = 1;
    }

    message PeriodicCol {
        uint32 idx = 1;
        sint32 rowOffset = 2;
    }

    message FixedCol {
        uint32 idx = 1;
        sint32 rowOffset = 2;
    }

    message WitnessCol {
        uint32 stage = 1;
        uint32 colIdx = 2;      // index relative to the stage
        sint32 rowOffset = 3;
    }

    message Expression {
        uint32 idx = 1;
    }

    oneof operand {
        Constant constant = 1;
        Challenge challenge = 2;
        ProofValue proofValue = 3;
        SubproofValue subproofValue = 4;
        PublicValue publicValue = 5;
        PeriodicCol periodicCol = 6;
        FixedCol fixedCol = 7;
        WitnessCol witnessCol = 8;
        Expression expression = 9;
    }
}

message Expression {
    message Add {
        Operand lhs = 1;
        Operand rhs = 2;
    }

    message Sub {
        Operand lhs = 1;
        Operand rhs = 2;
    }

    message Mul {
        Operand lhs = 1;
        Operand rhs = 2;
    }

    message Neg {
        Operand value = 1;
    }

    oneof operation {
        Add add = 1;
        Sub sub = 2;
        Mul mul = 3;
        Neg neg = 4;
    }
}

// ================ Symbols ================

enum SymbolType {
    IM_COL = 0;
    FIXED_COL = 1;
    PERIODIC_COL = 2;
    WITNESS_COL = 3;
    PROOF_VALUE = 4;
    SUBPROOF_VALUE = 5;
    PUBLIC_VALUE = 6;
    PUBLIC_TABLE = 7;
    CHALLENGE = 8;
}

message Symbol {
    string name = 1;
    optional uint32 subproofId = 2;
    optional uint32 airId = 3;
    SymbolType type = 4;
    uint32 id = 5;
    uint32 dim = 6;
    repeated uint32 lengths = 7;
    optional string debugLine = 8;
}

// ================ Hints ================

enum HintFieldType {
    STRING = 0;
    OPERAND = 1;
    ARRAY = 2;
}

message HintField {
    HintFieldType hintFieldType = 1; // ???
    optional string name = 2;
    oneof value {
        string stringValue = 3;
        Operand operand = 4;
        HintFieldArray hintFields = 5;
    }
}

message HintFieldArray {
    repeated HintField hintFields = 1;
}

message Hint {
    string name = 1;
    repeated HintField hintFields = 2;
    optional uint32 subproofId = 3;
    optional uint32 airId = 4;
}
